

    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:my_delivery_app/screens/address_capture_screen.dart';
import 'package:provider/provider.dart';
import 'screens/home_screen.dart';
import 'screens/supermarket_screen.dart';
import 'screens/traditional_market_screen.dart';
import 'screens/shops_screen.dart';
import 'screens/checkout_screen.dart';
import 'screens/login_screen.dart';
import 'screens/register_screen.dart';
import 'screens/profile_screen.dart';
import 'screens/search_screen.dart';
import 'screens/favorites_screen.dart';
import 'screens/order_history_screen.dart';
import 'screens/order_confirmation_screen.dart';
import 'screens/points_history_screen.dart';
import 'screens/chat_list_screen.dart';
import 'screens/product_details_screen.dart';
import 'screens/unknown_route_screen.dart';
import 'services/auth_service.dart';
import 'services/cart_service.dart';
import 'services/notification_service.dart';
import 'services/payment_service.dart';
import 'services/chat_service.dart';
import 'services/recommendation_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();

  final notificationService = NotificationService();
  await notificationService.init();

  final paymentService = PaymentService();
  await paymentService.initializeStripe();

  final chatService = ChatService();
  final recommendationService = RecommendationService();

  runApp(MyApp(
    notificationService: notificationService,
    paymentService: paymentService,
    chatService: chatService,
    recommendationService: recommendationService,
  ));
}

class MyApp extends StatelessWidget {
  final NotificationService notificationService;
  final PaymentService paymentService;
  final ChatService chatService;
  final RecommendationService recommendationService;

  const MyApp({
    Key? key,
    required this.notificationService,
    required this.paymentService,
    required this.chatService,
    required this.recommendationService,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthService()),
        ChangeNotifierProxyProvider<AuthService, CartService>(
          create: (_) => CartService(),
          update: (_, authService, previousCartService) =>
              previousCartService!..updateUserId(authService.currentUser?.uid),
        ),
        Provider<NotificationService>.value(value: notificationService),
        Provider<PaymentService>.value(value: paymentService),
        Provider<ChatService>.value(value: chatService),
        Provider<RecommendationService>.value(value: recommendationService),
      ],
      child: MaterialApp(
        title: 'My Delivery App',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.adaptivePlatformDensity,
        ),
        debugShowCheckedModeBanner: false,
        home: LoginScreen(),
        routes: {
          '/home': (context) => HomeScreen(),
          '/login': (context) => LoginScreen(),
          '/register': (context) => RegisterScreen(),
          '/profile': (context) => ProfileScreen(),
          '/supermarkets': (context) => SupermarketScreen(),
          '/traditional_market': (context) => TraditionalMarketScreen(location: 'casablanca'),
          '/shops': (context) => ShopsScreen(),
          '/checkout': (context) => CheckoutScreen(),
          '/search': (context) => SearchScreen(),
          '/favorites': (context) => FavoritesScreen(),
          '/order_history': (context) => OrderHistoryScreen(),
          '/order_confirmation': (context) => OrderConfirmationScreen(orderId: ModalRoute.of(context)!.settings.arguments as String),
          '/points_history': (context) => PointsHistoryScreen(),
          '/chat_list': (context) => ChatListScreen(),
          '/product_details': (context) => ProductDetailsScreen(productId: ModalRoute.of(context)!.settings.arguments as String),
        },
        onUnknownRoute: (settings) {
          return MaterialPageRoute(builder: (context) => UnknownRouteScreen());
        },
      ),
    );
  }
}

class AuthWrapper extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context, listen: false);
    final cartService = Provider.of<CartService>(context, listen: false);

    return FutureBuilder<bool>(
      future: authService.isUserLoggedIn(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Scaffold(body: Center(child: CircularProgressIndicator()));
        } else {
          if (snapshot.data == true) {
            authService.loadUserCart(context);
            return FutureBuilder<bool>(
              future: authService.userHasAddress(),
              builder: (context, addressSnapshot) {
                if (addressSnapshot.connectionState == ConnectionState.waiting) {
                  return Scaffold(body: Center(child: CircularProgressIndicator()));
                } else {
                  if (addressSnapshot.data == true) {
                    return HomeScreen();
                  } else {
                    return AddressCaptureScreen();
                  }
                }
              },
            );
          } else {
            return LoginScreen();
          }
        }
      },
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\cart_item.dart
class CartItem {
  final String id;
  final String name;
  final double price;
  final String imageUrl;
  final String sellerType;
  int quantity;

  CartItem({
    required this.id,
    required this.name,
    required this.price,
    required this.imageUrl,
    required this.sellerType,
    this.quantity = 1,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'price': price,
      'imageUrl': imageUrl,
      'quantity': quantity,
      'sellerType': sellerType,
    };
  }

  factory CartItem.fromMap(Map<String, dynamic> map) {
    return CartItem(
      id: map['id'],
      name: map['name'],
      price: map['price'],
      imageUrl: map['imageUrl'],
      quantity: map['quantity'],
      sellerType: map['sellerType'],
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\category.dart
class Category {
  final String id;
  final String name;
  final String url;
  final String imageUrl;
  final bool isSubcategory;

  Category({
    required this.id,
    required this.name,
    required this.url,
    required this.imageUrl,
    this.isSubcategory = false,
  });
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\customization.dart
class CustomizationGroup {
  final String id;
  final String title;
  final String subtitle;
  final List<CustomizationOption> options;

  CustomizationGroup({
    required this.id,
    required this.title,
    required this.subtitle,
    required this.options,
  });
}

class CustomizationOption {
  final String id;
  final String name;
  final double price;
  bool isSelected;

  CustomizationOption({
    required this.id,
    required this.name,
    required this.price,
    this.isSelected = false,
  });
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\custom_user.dart
import 'package:firebase_auth/firebase_auth.dart' as auth;

class CustomUser {
  final String uid;
  final String? email;
  final String? displayName;
  final int points;

  CustomUser({
    required this.uid,
    this.email,
    this.displayName,
    this.points = 0,
  });

  factory CustomUser.fromFirebaseUser(auth.User user, {int points = 0}) {
    return CustomUser(
      uid: user.uid,
      email: user.email,
      displayName: user.displayName,
      points: points,
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\delivery_status.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class DeliveryStatus {
  final String orderId;
  final String status;
  final DateTime timestamp;
  final String? description;
  final GeoPoint? location;

  DeliveryStatus({
    required this.orderId,
    required this.status,
    required this.timestamp,
    this.description,
    this.location,
  });

  factory DeliveryStatus.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return DeliveryStatus(
      orderId: data['order_id'] ?? '',
      status: data['status'] ?? '',
      timestamp: (data['timestamp'] as Timestamp).toDate(),
      description: data['description'],
      location: data['location'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'order_id': orderId,
      'status': status,
      'timestamp': Timestamp.fromDate(timestamp),
      'description': description,
      'location': location,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\order.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Order {
  final String id;
  final String userId;
  final List<OrderItem> items;
  final double totalAmount;
  final String status;
  final DateTime createdAt;
  final DateTime? updatedAt;
  final String? paymentIntentId;

  Order({
    required this.id,
    required this.userId,
    required this.items,
    required this.totalAmount,
    required this.status,
    required this.createdAt,
    this.updatedAt,
    this.paymentIntentId,
  });

  factory Order.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return Order(
      id: doc.id,
      userId: data['user_id'] ?? '',
      items: (data['items'] as List? ?? []).map((item) => OrderItem.fromMap(item)).toList(),
      totalAmount: (data['total_amount'] ?? 0).toDouble(),
      status: data['status'] ?? '',
      createdAt: (data['created_at'] as Timestamp).toDate(),
      updatedAt: data['updated_at'] != null ? (data['updated_at'] as Timestamp).toDate() : null,
      paymentIntentId: data['payment_intent_id'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'user_id': userId,
      'items': items.map((item) => item.toMap()).toList(),
      'total_amount': totalAmount,
      'status': status,
      'created_at': Timestamp.fromDate(createdAt),
      'updated_at': updatedAt != null ? Timestamp.fromDate(updatedAt!) : null,
      'payment_intent_id': paymentIntentId,
    };
  }
}

class OrderItem {
  final String productId;
  final String productName;
  final int quantity;
  final double price;

  OrderItem({
    required this.productId,
    required this.productName,
    required this.quantity,
    required this.price,
  });

  factory OrderItem.fromMap(Map<String, dynamic> data) {
    return OrderItem(
      productId: data['product_id'] ?? '',
      productName: data['product_name'] ?? '',
      quantity: data['quantity'] ?? 0,
      price: (data['price'] ?? 0).toDouble(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'product_id': productId,
      'product_name': productName,
      'quantity': quantity,
      'price': price,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\product.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Product {
  final String id;
  final String name;
  final String description;
  final double price;
  final String imageUrl;
  final String category;
  final String sellerId;
  final String sellerType;
  final String unit;
  final int popularity;
  final double averageRating;
  final int numberOfRatings;
  final String url;

  Product({
    required this.id,
    required this.name,
    required this.description,
    required this.price,
    required this.imageUrl,
    required this.category,
    required this.sellerId,
    required this.sellerType,
    required this.unit,
    this.popularity = 0,
    this.averageRating = 0,
    this.numberOfRatings = 0,
    required this.url,
  });

  factory Product.fromMap(Map<String, dynamic> data) {
    return Product(
      id: data['id'] ?? '',
      name: data['name'] ?? '',
      description: data['description'] ?? '',
      price: (data['price'] ?? 0).toDouble(),
      imageUrl: data['image_url'] ?? '',
      category: data['category'] ?? '',
      sellerId: data['seller_id'] ?? '',
      sellerType: data['seller_type'] ?? '',
      unit: data['unit'] ?? '',
      popularity: data['popularity'] ?? 0,
      averageRating: (data['averageRating'] ?? 0).toDouble(),
      numberOfRatings: data['numberOfRatings'] ?? 0,
      url: data['url'] ?? '',
    );
  }

  factory Product.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return Product.fromMap({...data, 'id': doc.id});
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'description': description,
      'price': price,
      'image_url': imageUrl,
      'category': category,
      'seller_id': sellerId,
      'seller_type': sellerType,
      'unit': unit,
      'popularity': popularity,
      'averageRating': averageRating,
      'numberOfRatings': numberOfRatings,
      'url': url,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\promotion.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Promotion {
  final String id;
  final String title;
  final String description;
  final String imageUrl;
  final String linkUrl;
  final DateTime startDate;
  final DateTime endDate;

  Promotion({
    required this.id,
    required this.title,
    required this.description,
    required this.imageUrl,
    required this.linkUrl,
    required this.startDate,
    required this.endDate,
  });

  factory Promotion.fromMap(Map<String, dynamic> data, String id) {
    return Promotion(
      id: id,
      title: data['title'] ?? '',
      description: data['description'] ?? '',
      imageUrl: data['imageUrl'] ?? '',
      linkUrl: data['linkUrl'] ?? '',
      startDate: (data['startDate'] as Timestamp).toDate(),
      endDate: (data['endDate'] as Timestamp).toDate(),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\restaurant.dart
class Restaurant {
  final String id;
  final String name;
  final String imageUrl;
  final int rating;
  final int ratingCount;
  final String cuisine;
  final String address;
  final int discount;
  final String promotion;
  final int estimatedDeliveryTime;
  final bool hasCocaColaDeal;
  final List<String> tags;
  final String url;  // New field

  Restaurant({
    required this.id,
    required this.name,
    required this.imageUrl,
    required this.rating,
    required this.ratingCount,
    required this.cuisine,
    required this.address,
    this.discount = 0,
    this.promotion = '',
    this.estimatedDeliveryTime = 30,
    this.hasCocaColaDeal = false,
    this.tags = const [],
    required this.url,  // New required parameter
  });

  factory Restaurant.fromMap(Map<String, dynamic> map) {
    return Restaurant(
      id: map['id'] ?? '',
      name: map['name'] ?? '',
      imageUrl: map['imageUrl'] ?? '',
      rating: map['rating'] ?? 0,
      ratingCount: map['ratingCount'] ?? 0,
      cuisine: map['cuisine'] ?? '',
      address: map['address'] ?? '',
      discount: map['discount'] ?? 0,
      promotion: map['promotion'] ?? '',
      estimatedDeliveryTime: map['estimatedDeliveryTime'] ?? 30,
      hasCocaColaDeal: map['hasCocaColaDeal'] ?? false,
      tags: List<String>.from(map['tags'] ?? []),
      url: map['url'] ?? '',  // New field
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'imageUrl': imageUrl,
      'rating': rating,
      'ratingCount': ratingCount,
      'cuisine': cuisine,
      'address': address,
      'discount': discount,
      'promotion': promotion,
      'estimatedDeliveryTime': estimatedDeliveryTime,
      'hasCocaColaDeal': hasCocaColaDeal,
      'tags': tags,
      'url': url,  // New field
    };
  }

  Restaurant copyWith({
    String? id,
    String? name,
    String? imageUrl,
    int? rating,
    int? ratingCount,
    String? cuisine,
    String? address,
    int? discount,
    String? promotion,
    int? estimatedDeliveryTime,
    bool? hasCocaColaDeal,
    List<String>? tags,
    String? url,  // New parameter
  }) {
    return Restaurant(
      id: id ?? this.id,
      name: name ?? this.name,
      imageUrl: imageUrl ?? this.imageUrl,
      rating: rating ?? this.rating,
      ratingCount: ratingCount ?? this.ratingCount,
      cuisine: cuisine ?? this.cuisine,
      address: address ?? this.address,
      discount: discount ?? this.discount,
      promotion: promotion ?? this.promotion,
      estimatedDeliveryTime: estimatedDeliveryTime ?? this.estimatedDeliveryTime,
      hasCocaColaDeal: hasCocaColaDeal ?? this.hasCocaColaDeal,
      tags: tags ?? this.tags,
      url: url ?? this.url,  // New field
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\review.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Review {
  final String id;
  final String userId;
  final String productId;
  final double rating;
  final String comment;
  final DateTime createdAt;

  Review({
    required this.id,
    required this.userId,
    required this.productId,
    required this.rating,
    required this.comment,
    required this.createdAt,
  });

  factory Review.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return Review(
      id: doc.id,
      userId: data['userId'] ?? '',
      productId: data['productId'] ?? '',
      rating: (data['rating'] ?? 0).toDouble(),
      comment: data['comment'] ?? '',
      createdAt: (data['createdAt'] as Timestamp).toDate(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'userId': userId,
      'productId': productId,
      'rating': rating,
      'comment': comment,
      'createdAt': Timestamp.fromDate(createdAt),
    };
  }
}



    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\stall.dart
class Stall {
  final String id;
  final String name;
  final String description;

  Stall({
    required this.id,
    required this.name,
    required this.description,
  });

  factory Stall.fromJson(Map<String, dynamic> json) {
    return Stall(
      id: json['id'] ?? '',
      name: json['name'] ?? '',
      description: json['description'] ?? '',
    );
  }

  @override
  String toString() => 'Stall(id: $id, name: $name, description: $description)';
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\models\user.dart
class User {
  final String id;
  final String email;
  final String name;
  final String phone;
  final int points;

  User({
    required this.id,
    required this.email,
    required this.name,
    required this.phone,
    this.points = 0,
  });

  factory User.fromFirestore(Map<String, dynamic> data, String id) {
    return User(
      id: id,
      email: data['email'] ?? '',
      name: data['name'] ?? '',
      phone: data['phone'] ?? '',
      points: data['points'] ?? 0,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'email': email,
      'name': name,
      'phone': phone,
      'points': points,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\address_capture_screen.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';
import 'package:google_fonts/google_fonts.dart';
import '../services/auth_service.dart';
import '../services/firestore_service.dart';

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color cardBackground = Colors.white;
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
}

class AddressCaptureScreen extends StatefulWidget {
  @override
  _AddressCaptureScreenState createState() => _AddressCaptureScreenState();
}

class _AddressCaptureScreenState extends State<AddressCaptureScreen> with WidgetsBindingObserver {
  final FirestoreService _firestoreService = FirestoreService();
  MapController _mapController = MapController();
  LatLng? _currentPosition;
  String _currentAddress = "";
  bool _isLoading = true;
  String _errorMessage = "";

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _checkLocationPermission();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed) {
      _checkLocationPermission();
    }
  }

  Future<void> _checkLocationPermission() async {
    setState(() {
      _isLoading = true;
      _errorMessage = "";
    });

    bool serviceEnabled;
    LocationPermission permission;

    try {
      serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        bool userEnabledLocation = await _askUserToEnableLocation();
        if (!userEnabledLocation) {
          throw Exception('Location services are required for this app.');
        }
        return; // The app will retry when it resumes
      }

      permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          throw Exception('Location permissions are denied');
        }
      }
      
      if (permission == LocationPermission.deniedForever) {
        throw Exception('Location permissions are permanently denied, we cannot request permissions.');
      } 

      await _getCurrentLocation();
    } catch (e) {
      setState(() {
        _errorMessage = e.toString();
        _isLoading = false;
      });
    }
  }

  Future<bool> _askUserToEnableLocation() async {
    return await showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Location Services Disabled'),
          content: Text('Location services are disabled. Would you like to enable them?'),
          actions: <Widget>[
            TextButton(
              child: Text('No'),
              onPressed: () => Navigator.of(context).pop(false),
            ),
            TextButton(
              child: Text('Yes'),
              onPressed: () async {
                Navigator.of(context).pop(true);
                await Geolocator.openLocationSettings();
              },
            ),
          ],
        );
      },
    ) ?? false;
  }

  Future<void> _getCurrentLocation() async {
    try {
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
        timeLimit: Duration(seconds: 5)
      );
      
      setState(() {
        _currentPosition = LatLng(position.latitude, position.longitude);
        _isLoading = false;
      });
      
      await _getAddressFromLatLng();
    } on TimeoutException {
      setState(() {
        _errorMessage = "Location request timed out. Please try again.";
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _errorMessage = "Error getting location: $e";
        _isLoading = false;
      });
    }
  }

  Future<void> _getAddressFromLatLng() async {
    try {
      List<Placemark> placemarks = await placemarkFromCoordinates(
        _currentPosition!.latitude,
        _currentPosition!.longitude
      );

      if (placemarks.isNotEmpty) {
        Placemark place = placemarks[0];
        setState(() {
          _currentAddress = "${place.street}, ${place.subLocality}, "
              "${place.locality}, ${place.postalCode}, ${place.country}";
        });
      } else {
        setState(() {
          _currentAddress = "Address not found";
        });
      }
    } catch (e) {
      setState(() {
        _currentAddress = "Error retrieving address";
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [DeliverooColors.primary, DeliverooColors.primary.withOpacity(0.8)],
          ),
        ),
        child: SafeArea(
          child: _isLoading
              ? _buildLoadingWidget()
              : _errorMessage.isNotEmpty
                  ? _buildErrorWidget()
                  : _buildContentWidget(),
        ),
      ),
    );
  }

  Widget _buildLoadingWidget() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(color: Colors.white),
          SizedBox(height: 16),
          Text(
            'Getting your location...',
            style: GoogleFonts.poppins(
              textStyle: TextStyle(color: Colors.white, fontSize: 18),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildErrorWidget() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.error_outline, size: 80, color: Colors.white),
          SizedBox(height: 16),
          Text(
            _errorMessage,
            style: GoogleFonts.poppins(
              textStyle: TextStyle(color: Colors.white, fontSize: 18),
            ),
            textAlign: TextAlign.center,
          ),
          SizedBox(height: 24),
          ElevatedButton(
            onPressed: _checkLocationPermission,
            child: Text('Retry', style: GoogleFonts.poppins(fontSize: 16)),
            style: ElevatedButton.styleFrom(
              foregroundColor: DeliverooColors.primary,
              backgroundColor: Colors.white,
              padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(30),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContentWidget() {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(
            'Confirm Your Address',
            style: GoogleFonts.poppins(
              textStyle: TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      Expanded(
        child: Container(
          margin: EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: DeliverooColors.cardBackground,
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black26,
                blurRadius: 10,
                offset: Offset(0, 5),
              ),
            ],
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(20),
            child: FlutterMap(
              mapController: _mapController,
              options: MapOptions(
                initialCenter: _currentPosition ?? LatLng(0, 0),
                initialZoom: 16.0,
              ),
              children: [
                TileLayer(
                  urlTemplate: "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
                  subdomains: ['a', 'b', 'c'],
                ),
                if (_currentPosition != null)
                  MarkerLayer(
                    markers: [
                      Marker(
                        width: 80.0,
                        height: 80.0,
                        point: _currentPosition!,
                        child: Icon(
                          Icons.location_on,
                          color: DeliverooColors.primary,
                          size: 40.0,
                        ),
                      ),
                    ],
                  ),
              ],
            ),
          ),
        ),
      ),
        Container(
          padding: EdgeInsets.all(24),
          decoration: BoxDecoration(
            color: DeliverooColors.cardBackground,
            borderRadius: BorderRadius.vertical(top: Radius.circular(30)),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Text(
                'Your current address:',
                style: GoogleFonts.poppins(
                  textStyle: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 18,
                    color: DeliverooColors.primary,
                  ),
                ),
              ),
              SizedBox(height: 8),
              Text(
                _currentAddress,
                style: GoogleFonts.poppins(
                  textStyle: TextStyle(fontSize: 16, color: DeliverooColors.textDark),
                ),
              ),
              SizedBox(height: 24),
              ElevatedButton(
                child: Padding(
                  padding: EdgeInsets.symmetric(vertical: 16),
                  child: Text(
                    'Confirm Address',
                    style: GoogleFonts.poppins(
                      textStyle: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
                    ),
                  ),
                ),
                style: ElevatedButton.styleFrom(
                  foregroundColor: Colors.white,
                  backgroundColor: DeliverooColors.primary,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                  elevation: 5,
                ),
                onPressed: () async {
    if (_currentPosition != null) {
      try {
        await _firestoreService.saveUserAddress(
          AuthService().currentUser!.uid,
          _currentAddress,
          _currentPosition!.latitude,
          _currentPosition!.longitude,
        );
        Navigator.of(context).pushReplacementNamed('/home');
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error saving address: $e')),
        );
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Unable to save address. Please try again.')),
      );
    }
  },

              ),
            ],
          ),
        ),
      ],
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\add_review_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/review.dart';
import '../services/auth_service.dart';
import '../services/review_service.dart';

class AddReviewScreen extends StatefulWidget {
  final String productId;

  AddReviewScreen({required this.productId});

  @override
  _AddReviewScreenState createState() => _AddReviewScreenState();
}

class _AddReviewScreenState extends State<AddReviewScreen> {
  final _formKey = GlobalKey<FormState>();
  final ReviewService _reviewService = ReviewService();
  double _rating = 0;
  String _comment = '';

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);
    final userId = authService.currentUser!.uid;

    return Scaffold(
      appBar: AppBar(
        title: Text('Add Review'),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('Rate this product:', style: TextStyle(fontSize: 18)),
              SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: List.generate(5, (index) {
                  return IconButton(
                    icon: Icon(
                      index < _rating ? Icons.star : Icons.star_border,
                      color: Colors.amber,
                      size: 40,
                    ),
                    onPressed: () {
                      setState(() {
                        _rating = index + 1;
                      });
                    },
                  );
                }),
              ),
              SizedBox(height: 20),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Your Review',
                  border: OutlineInputBorder(),
                ),
                maxLines: 5,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter your review';
                  }
                  return null;
                },
                onSaved: (value) {
                  _comment = value!;
                },
              ),
              SizedBox(height: 20),
              Center(
                child: ElevatedButton(
                  child: Text('Submit Review'),
                  onPressed: () async {
                    if (_formKey.currentState!.validate() && _rating > 0) {
                      _formKey.currentState!.save();
                      try {
                        Review review = Review(
                          id: '',
                          userId: userId,
                          productId: widget.productId,
                          rating: _rating,
                          comment: _comment,
                          createdAt: DateTime.now(),
                        );
                        await _reviewService.addReview(review);
                        Navigator.pop(context);
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('Review submitted successfully')),
                        );
                      } catch (e) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('Failed to submit review: ${e.toString()}')),
                        );
                      }
                    } else if (_rating == 0) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text('Please select a rating')),
                      );
                    }
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}



    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\carrefour_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:my_delivery_app/screens/search_carrefour_screen.dart';
import 'package:provider/provider.dart';
import 'package:my_delivery_app/services/carrefour_service.dart';
import 'package:my_delivery_app/services/cart_service.dart';
import 'package:my_delivery_app/models/category.dart';
import 'package:my_delivery_app/models/product.dart';
import 'package:my_delivery_app/screens/cart_screen.dart';
import 'package:badges/badges.dart' as badges;
import 'package:shimmer/shimmer.dart';

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
  static const Color accent = Color(0xFFFF8000);
}

class CarrefourScreen extends StatefulWidget {
  final String location;

  const CarrefourScreen({Key? key, required this.location}) : super(key: key);

  @override
  _CarrefourScreenState createState() => _CarrefourScreenState();
}

class _CarrefourScreenState extends State<CarrefourScreen> {
  final CarrefourService _carrefourService = CarrefourService();
  final TextEditingController _searchController = TextEditingController();

  Future<List<Category>> _fetchCategories() async {
    return await _carrefourService.getCarrefourCategories(widget.location);
  }

  Future<List<Product>> _fetchCategoryProducts(String categoryUrl) async {
    return await _carrefourService.getCategoryProducts(categoryUrl);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: DeliverooColors.background,
      body: CustomScrollView(
        slivers: [
          _buildSliverAppBar(),
          SliverToBoxAdapter(
            child: _buildSearchBox(),
          ),
          FutureBuilder<List<Category>>(
            future: _fetchCategories(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return SliverToBoxAdapter(child: _buildCategoryShimmerEffect());
              } else if (snapshot.hasError) {
                return SliverToBoxAdapter(
                  child: Center(child: Text('Error: ${snapshot.error}')),
                );
              } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return SliverToBoxAdapter(
                  child: Center(child: Text('No categories found')),
                );
              } else {
                return SliverList(
                  delegate: SliverChildBuilderDelegate(
                    (context, index) => _buildCarrefourSection(snapshot.data![index]),
                    childCount: snapshot.data!.length,
                  ),
                );
              }
            },
          ),
        ],
      ),
    );
  }

  Widget _buildSliverAppBar() {
  return SliverAppBar(
    floating: true,
    snap: true,
    elevation: 2,
    backgroundColor: DeliverooColors.primary,
    iconTheme: IconThemeData(color: Colors.white), // Add this line to make the back arrow white
    title: Text(
      'Carrefour',
      style: GoogleFonts.poppins(
        textStyle: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 24),
      ),
    ),
    actions: [
      Consumer<CartService>(
        builder: (context, cart, child) {
          return Padding(
            padding: const EdgeInsets.only(right: 16.0),
            child: badges.Badge(
              position: badges.BadgePosition.topEnd(top: 0, end: 3),
              badgeAnimation: badges.BadgeAnimation.rotation(
                animationDuration: Duration(seconds: 1),
                colorChangeAnimationDuration: Duration(seconds: 1),
                loopAnimation: false,
                curve: Curves.fastOutSlowIn,
                colorChangeAnimationCurve: Curves.easeInCubic,
              ),
              badgeStyle: badges.BadgeStyle(
                shape: badges.BadgeShape.circle,
                badgeColor: DeliverooColors.accent,
                padding: EdgeInsets.all(5),
                borderRadius: BorderRadius.circular(4),
                borderSide: BorderSide.none,
                elevation: 0,
              ),
              badgeContent: Text(
                '${cart.itemCount}',
                style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
              ),
              child: IconButton(
                icon: Icon(Icons.shopping_basket, color: Colors.white),
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => CartScreen()),
                  );
                },
              ),
            ),
          );
        },
      ),
    ],
  );
}
    Widget _buildSearchBox() {
   return Container(
      margin: EdgeInsets.all(16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: DeliverooColors.primary,
            offset: Offset(0, 3),
            blurRadius: 0,
          ),
        ],
      ),
      child: SizedBox(
        width: double.infinity,
        child: OutlinedButton.icon(
          onPressed: () => _navigateToSearchScreen(context),
          icon: Icon(Icons.search, size: 18, color: const Color.fromARGB(255, 60, 60, 60)),
          label: Text(
            'Search in Carrefour',
            style: GoogleFonts.poppins(
              textStyle: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: DeliverooColors.primary),
            ),
          ),
          style: OutlinedButton.styleFrom(
            foregroundColor: DeliverooColors.primary,
            side: BorderSide(color: DeliverooColors.primary, width: 2),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
            padding: EdgeInsets.symmetric(vertical: 16),
            backgroundColor: Colors.white,
          ),
        ),
      ),
    );
  }
  
  void _navigateToSearchScreen(BuildContext context) {
    Navigator.push(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => SearchCarrefourScreen(location: widget.location),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          const begin = Offset(0.0, 1.0);
          const end = Offset.zero;
          const curve = Curves.easeInOut;
          var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
          var offsetAnimation = animation.drive(tween);
          return SlideTransition(position: offsetAnimation, child: child);
        },
      ),
    );
  }

  Widget _buildCarrefourSection(Category category) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          child: Text(
            category.name,
            style: GoogleFonts.poppins(
              fontSize: 22,
              fontWeight: FontWeight.bold,
              color: DeliverooColors.textDark,
            ),
          ),
        ),
        Container(
          height: 320,
          child: FutureBuilder<List<Product>>(
            future: _fetchCategoryProducts(category.url),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return _buildProductShimmerEffect();
              } else if (snapshot.hasError) {
                return Center(child: Text('Error loading products'));
              } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return Center(child: Text('No products available'));
              } else {
                return ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: snapshot.data!.length,
                  itemBuilder: (context, index) {
                    return _buildProductCard(snapshot.data![index]);
                  },
                );
              }
            },
          ),
        ),
      ],
    );
  }

  Widget _buildProductCard(Product product) {
    return Container(
      width: 200,
      height: 300,
      margin: EdgeInsets.only(left: 16, bottom: 16, right: 8),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Stack(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                child: Image.network(
                  product.imageUrl,
                  width: 200,
                  height: 150,
                  fit: BoxFit.cover,
                ),
              ),
              Positioned(
                top: 8,
                right: 8,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: DeliverooColors.primary.withOpacity(0.9),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '${product.price.toStringAsFixed(2)} MAD',
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
            ],
          ),
          Expanded(
            child: Padding(
              padding: EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    product.name,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: DeliverooColors.textDark,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  Row(
                    children: [
                      Icon(Icons.star, color: DeliverooColors.accent, size: 16),
                      SizedBox(width: 4),
                                            Text(
                        product.averageRating.toStringAsFixed(1),
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                          color: DeliverooColors.textLight,
                        ),
                      ),
                      SizedBox(width: 8),
                      Text(
                        '(${product.numberOfRatings})',
                        style: GoogleFonts.poppins(
                          fontSize: 12,
                          color: DeliverooColors.textLight,
                        ),
                      ),

                    ],
                  ),
                  SizedBox(height: 8),
                  SizedBox(
                    width: double.infinity,
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: DeliverooColors.primary,
                            offset: Offset(0, 4),
                            blurRadius: 0,
                          ),
                        ],
                      ),
                      child: OutlinedButton.icon(
                        onPressed: () {
                       Provider.of<CartService>(context, listen: false)
    .addItem(product.id, product.name, product.price, product.imageUrl, product.sellerType); // Pass sellerType
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text(
                                'Added to cart',
                                style: GoogleFonts.poppins(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w500,
                                  color: Colors.white,
                                ),
                              ),
                              backgroundColor: DeliverooColors.primary,
                              behavior: SnackBarBehavior.floating,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                            ),
                          );
                        },
                        icon: Icon(Icons.add_shopping_cart, size: 18),
                        label: Text('Add to Cart', style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: DeliverooColors.primary,
                          side: BorderSide(color: DeliverooColors.primary, width: 2),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          padding: EdgeInsets.symmetric(vertical: 12),
                          backgroundColor: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCategoryShimmerEffect() {
    return Shimmer.fromColors(
      baseColor: Colors.grey[300]!,
      highlightColor: Colors.grey[100]!,
      child: Column(
        children: [
          ...List.generate(3, (index) => _buildShimmerSection()),
        ],
      ),
    );
  }

  

  Widget _buildProductShimmerEffect() {
    return ListView.builder(
      scrollDirection: Axis.horizontal,
      itemCount: 3,
      itemBuilder: (context, index) {
        return Container(
          width: 200,
          height: 300,
          margin: EdgeInsets.only(left: 16, bottom: 16, right: 8),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            color: Colors.white,
          ),
          child: Shimmer.fromColors(
            baseColor: Colors.grey[300]!,
            highlightColor: Colors.grey[100]!,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  width: 200,
                  height: 150,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                  ),
                ),
                Padding(
                  padding: EdgeInsets.all(12),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        width: 140,
                        height: 16,
                        color: Colors.white,
                      ),
                      SizedBox(height: 8),
                      Container(
                        width: 100,
                        height: 16,
                        color: Colors.white,
                      ),
                      SizedBox(height: 12),
                      Container(
                        width: double.infinity,
                        height: 40,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(20),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildShimmerSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          child: Container(
            width: 150,
            height: 24,
            color: Colors.white,
          ),
        ),
        Container(
          height: 320,
          child: _buildProductShimmerEffect(),
        ),
      ],
    );
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\cart_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';
import '../services/cart_service.dart';
import '../models/cart_item.dart';

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
}

class CartScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: Text(
          'Your Cart',
          style: GoogleFonts.poppins(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
        backgroundColor: DeliverooColors.primary,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: Consumer<CartService>(
        builder: (context, cart, child) {
          if (cart.items.isEmpty) {
            return _buildEmptyCart();
          }
          return _buildCartList(context, cart);
        },
      ),
      bottomNavigationBar: _buildCheckoutBar(context),
    );
  }

  Widget _buildEmptyCart() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.shopping_cart_outlined, size: 100, color: Color(0xFFE0E0E0)),
          SizedBox(height: 20),
          Text(
            'Your cart is empty',
            style: GoogleFonts.poppins(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: DeliverooColors.textDark,
            ),
          ),
          SizedBox(height: 10),
          Text(
            'Add some delicious items to get started!',
            style: GoogleFonts.poppins(
              fontSize: 16,
              color: DeliverooColors.textLight,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCartList(BuildContext context, CartService cart) {
    return ListView.builder(
      itemCount: cart.items.length,
      itemBuilder: (context, index) {
        String key = cart.items.keys.elementAt(index);
        return _buildCartItem(context, cart.items[key]!, cart, key);
      },
    );
  }

  Widget _buildCartItem(BuildContext context, CartItem item, CartService cart, String itemId) {
    return Dismissible(
      key: Key(item.id),
      direction: DismissDirection.endToStart,
      background: Container(
        alignment: Alignment.centerRight,
        padding: EdgeInsets.only(right: 20),
        color: Colors.red,
        child: Icon(Icons.delete, color: Colors.white),
      ),
      onDismissed: (direction) {
        cart.removeItem(itemId);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${item.name} removed from cart'),
            duration: Duration(seconds: 2),
            action: SnackBarAction(
              label: 'UNDO',
              onPressed: () {
                cart.addItem(itemId, item.name, item.price, item.imageUrl, item.sellerType);
              },
            ),
          ),
        );
      },
      child: Card(
        margin: EdgeInsets.symmetric(horizontal: 15, vertical: 10),
        elevation: 0,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
        child: Padding(
          padding: EdgeInsets.all(15),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Container(
                width: 80,
                height: 80,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(10),
                  image: DecorationImage(
                    fit: BoxFit.cover,
                    image: NetworkImage(item.imageUrl),
                  ),
                ),
              ),
              SizedBox(width: 15),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      item.name,
                      style: GoogleFonts.poppins(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: DeliverooColors.textDark,
                      ),
                    ),
                    SizedBox(height: 5),
                    Text(
                      '${item.price.toStringAsFixed(2)} MAD',
                      style: GoogleFonts.poppins(
                        fontSize: 14,
                        color: DeliverooColors.primary,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    SizedBox(height: 10),
                    Row(
                      children: [
                        _buildQuantityButton(Icons.remove, () => cart.decrementQuantity(itemId)),
                        SizedBox(width: 10),
                        Text(
                          '${item.quantity}',
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: DeliverooColors.textDark,
                          ),
                        ),
                        SizedBox(width: 10),
                        _buildQuantityButton(Icons.add, () => cart.incrementQuantity(itemId)),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildQuantityButton(IconData icon, VoidCallback onPressed) {
    return InkWell(
      onTap: onPressed,
      child: Container(
        padding: EdgeInsets.all(5),
        decoration: BoxDecoration(
          color: DeliverooColors.primary.withOpacity(0.1),
          borderRadius: BorderRadius.circular(5),
        ),
        child: Icon(icon, size: 20, color: DeliverooColors.primary),
      ),
    );
  }

  Widget _buildCheckoutBar(BuildContext context) {
    final cart = Provider.of<CartService>(context);
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            offset: Offset(0, -3),
            blurRadius: 10,
          ),
        ],
      ),
      child: SafeArea(
        child: Row(
          children: [
            Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Total',
                  style: GoogleFonts.poppins(
                    fontSize: 14,
                    color: DeliverooColors.textLight,
                  ),
                ),
                Text(
                  '${cart.totalAmount.toStringAsFixed(2)} MAD',
                  style: GoogleFonts.poppins(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: DeliverooColors.textDark,
                  ),
                ),
              ],
            ),
            SizedBox(width: 20),
            Expanded(
              child: ElevatedButton(
                onPressed: cart.items.isNotEmpty ? () {
                  Navigator.pushNamed(context, '/checkout');
                } : null,
                child: Text(
                  'Checkout',
                  style: GoogleFonts.poppins(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                style: ElevatedButton.styleFrom(
                  foregroundColor: Colors.white,
                  backgroundColor: DeliverooColors.primary,
                  padding: EdgeInsets.symmetric(vertical: 15),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\chat_list_screen.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import '../services/auth_service.dart';
import '../services/chat_service.dart';
import 'chat_screen.dart';

class ChatListScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);
    final chatService = Provider.of<ChatService>(context);
    final userId = authService.currentUser?.uid;

    return Scaffold(
      appBar: AppBar(
        title: Text('My Chats'),
        backgroundColor: Colors.teal,
      ),
      body: userId == null
          ? Center(child: Text('Please log in to view your chats'))
          : StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('chats')
                  .where('userId', isEqualTo: userId)
                  .orderBy('lastMessageTimestamp', descending: true)
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                }
                if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));
                }
                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                  return Center(child: Text('No active chats'));
                }

                return ListView.builder(
                  itemCount: snapshot.data!.docs.length,
                  itemBuilder: (context, index) {
                    var chatData = snapshot.data!.docs[index].data() as Map<String, dynamic>;
                    var chatId = snapshot.data!.docs[index].id;
                    return _buildChatListItem(context, chatData, chatId, chatService);
                  },
                );
              },
            ),
    );
  }

  Widget _buildChatListItem(BuildContext context, Map<String, dynamic> chatData, String chatId, ChatService chatService) {
    return Card(
      margin: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: Colors.teal,
          child: Icon(Icons.chat, color: Colors.white),
        ),
        title: Text('Order #${chatData['orderId']}'),
        subtitle: FutureBuilder<String>(
          future: chatService.getLastMessage(chatId),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return Text('Loading...');
            }
            return Text(
              snapshot.data ?? 'No messages yet',
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            );
          },
        ),
        trailing: chatData['unreadCount'] > 0
            ? CircleAvatar(
                radius: 12,
                backgroundColor: Colors.red,
                child: Text(
                  '${chatData['unreadCount']}',
                  style: TextStyle(color: Colors.white, fontSize: 12),
                ),
              )
            : null,
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => ChatScreen(orderId: chatData['orderId']),
            ),
          );
        },
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\chat_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/chat_service.dart';

class ChatScreen extends StatefulWidget {
  final String orderId;

  ChatScreen({required this.orderId});

  @override
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();

  @override
  Widget build(BuildContext context) {
    final chatService = Provider.of<ChatService>(context, listen: false);

    return Scaffold(
      appBar: AppBar(title: Text("Chat - Order ${widget.orderId}")),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder<List<Map<String, dynamic>>>(
              stream: chatService.getChatMessages(widget.orderId),
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));
                }
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                }
                final messages = snapshot.data ?? [];
                return ListView.builder(
                  reverse: true,
                  controller: _scrollController,
                  itemCount: messages.length,
                  itemBuilder: (context, index) {
                    return _buildMessageBubble(messages[index]);
                  },
                );
              },
            ),
          ),
          _buildMessageInput(chatService),
        ],
      ),
    );
  }

  Widget _buildMessageBubble(Map<String, dynamic> message) {
    final isCurrentUser = message['isUser'];
    return Align(
      alignment: isCurrentUser ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        margin: EdgeInsets.symmetric(vertical: 4, horizontal: 8),
        padding: EdgeInsets.symmetric(vertical: 8, horizontal: 12),
        decoration: BoxDecoration(
          color: isCurrentUser ? Colors.blue[100] : Colors.grey[200],
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              message['sender'],
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
            ),
            SizedBox(height: 4),
            Text(message['text']),
            SizedBox(height: 4),
            Text(
              message['timestamp'].toString().substring(11, 16),
              style: TextStyle(fontSize: 10, color: Colors.grey[600]),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMessageInput(ChatService chatService) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: _messageController,
              decoration: InputDecoration(
                hintText: 'Type a message...',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(20),
                ),
              ),
            ),
          ),
          IconButton(
            icon: Icon(Icons.send),
            onPressed: () => _sendMessage(chatService),
          ),
        ],
      ),
    );
  }

  void _sendMessage(ChatService chatService) {
    if (_messageController.text.isNotEmpty) {
      chatService.sendMessage(widget.orderId, _messageController.text);
      _messageController.clear();
      _scrollController.animateTo(
        0,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\checkout_screen.dart
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:geocoding/geocoding.dart';
import 'package:my_delivery_app/models/cart_item.dart';
import 'package:my_delivery_app/screens/order_tracking_screen.dart';
import 'package:provider/provider.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/cart_service.dart';
import '../services/auth_service.dart';
import '../services/firestore_service.dart';
import '../services/payment_service.dart';
import '../screens/marjane_screen.dart';

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
  static const Color accent = Color(0xFFFF8000);
}

class CheckoutScreen extends StatefulWidget {
  @override
  _CheckoutScreenState createState() => _CheckoutScreenState();
}

class _CheckoutScreenState extends State<CheckoutScreen> {
  final FirestoreService _firestoreService = FirestoreService();
  final PaymentService _paymentService = PaymentService();
  final TextEditingController _addressController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  String _selectedPaymentMethod = 'Cash';
  LatLng _selectedLocation = LatLng(31.7917, -7.0926);
  bool _isBottomSheetOpen = false;
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  bool _hasModifiedMap = false;
  final MapController _mapController = MapController();

  @override
  void initState() {
    super.initState();
    _loadUserInfo();
    _addressController.addListener(_onAddressChanged);
  }

  Future<void> _loadUserInfo() async {
    final authService = Provider.of<AuthService>(context, listen: false);
    final user = authService.currentUser;
    if (user != null) {
      final userData = await _firestoreService.getUser(user.uid);
      setState(() {
        _addressController.text = userData['address'] ?? '';
        _phoneController.text = userData['phone'] ?? '';
        if (userData['location'] != null) {
          _selectedLocation = LatLng(
            userData['location'].latitude,
            userData['location'].longitude,
          );
          _mapController.move(_selectedLocation, 15.0);
        }
      });
    }
  }

  void _onAddressChanged() {
    if (!_hasModifiedMap) {
      _updateMapFromAddress(_addressController.text);
    }
    _hasModifiedMap = false;
  }

  Future<void> _updateMapFromAddress(String address) async {
    try {
      List<Location> locations = await locationFromAddress(address);
      if (locations.isNotEmpty) {
        setState(() {
          _selectedLocation = LatLng(locations.first.latitude, locations.first.longitude);
          _mapController.move(_selectedLocation, 15.0);
        });
      }
    } catch (e) {
      print('Error updating map from address: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    final cart = Provider.of<CartService>(context);
    final auth = Provider.of<AuthService>(context);

    return Scaffold(
      backgroundColor: DeliverooColors.background,
      appBar: AppBar(
        title: Text(
          'Checkout',
          style: GoogleFonts.poppins(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: DeliverooColors.primary,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: cart.items.isEmpty
          ? _buildEmptyCart(context)
          : Stack(
              children: [
                _buildCartItems(cart),
                _buildBottomSheet(context, cart, auth),
              ],
            ),
    );
  }

  Widget _buildEmptyCart(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.shopping_cart_outlined,
            size: 100,
            color: DeliverooColors.primary,
          ),
          SizedBox(height: 20),
          Text(
            'Your cart is empty',
            style: GoogleFonts.poppins(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: DeliverooColors.textDark,
            ),
          ),
          SizedBox(height: 20),
          ElevatedButton(
            child: Text(
              'SHOP NOW',
              style: GoogleFonts.poppins(
                fontWeight: FontWeight.bold,
                fontSize: 16,
              ),
            ),
            style: ElevatedButton.styleFrom(
              foregroundColor: Colors.white,
              backgroundColor: DeliverooColors.primary,
              padding: EdgeInsets.symmetric(horizontal: 40, vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            onPressed: () => Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => MarjaneScreen(location: 'casablanca')),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCartItems(CartService cart) {
    return ListView.builder(
      padding: EdgeInsets.only(bottom: 180),
      itemCount: cart.items.length,
      itemBuilder: (ctx, i) => _buildCartItem(context, cart, cart.items.entries.toList()[i]),
    );
  }

  Widget _buildCartItem(BuildContext context, CartService cart, MapEntry<String, CartItem> entry) {
    final String productId = entry.key;
    final CartItem item = entry.value;

    return Dismissible(
      key: Key(productId),
      direction: DismissDirection.endToStart,
      background: Container(
        alignment: Alignment.centerRight,
        padding: EdgeInsets.only(right: 20),
        color: Colors.red,
        child: Icon(Icons.delete, color: Colors.white),
      ),
      onDismissed: (direction) {
        cart.removeItem(productId);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('${item.name} removed from cart')),
        );
      },
      child: Card(
        margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        elevation: 2,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Row(
            children: [
              Container(
                width: 60,
                height: 60,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8),
                  image: DecorationImage(
                    fit: BoxFit.cover,
                    image: NetworkImage(item.imageUrl),
                  ),
                ),
              ),
              SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      item.name,
                      style: GoogleFonts.poppins(
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
                    SizedBox(height: 4),
                    Text(
                      '${item.quantity} x ${item.price.toStringAsFixed(2)} MAD',
                      style: GoogleFonts.poppins(
                        color: DeliverooColors.textLight,
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
              Text(
                '${(item.price * item.quantity).toStringAsFixed(2)} MAD',
                style: GoogleFonts.poppins(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                  color: DeliverooColors.primary,
                ),
              ),
              IconButton(
                icon: Icon(Icons.delete_outline, color: Colors.red),
                onPressed: () {
                  cart.removeItem(productId);
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('${item.name} removed from cart')),
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildBottomSheet(BuildContext context, CartService cart, AuthService auth) {
    return AnimatedPositioned(
      duration: Duration(milliseconds: 300),
      curve: Curves.easeInOut,
      bottom: 0,
      left: 0,
      right: 0,
      height: _isBottomSheetOpen ? MediaQuery.of(context).size.height * 0.9 : 180,
      child: GestureDetector(
        onVerticalDragUpdate: (details) {
          if (details.primaryDelta! < -20) {
            setState(() {
              _isBottomSheetOpen = true;
            });
          } else if (details.primaryDelta! > 20) {
            setState(() {
              _isBottomSheetOpen = false;
            });
          }
        },
        child: Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 10,
                offset: Offset(0, -5),
              ),
            ],
          ),
          child: Form(
            key: _formKey,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  width: 40,
                  height: 4,
                  margin: EdgeInsets.symmetric(vertical: 10),
                  decoration: BoxDecoration(
                    color: Colors.grey[300],
                    borderRadius: BorderRadius.circular(2),
                  ),
                ),
                _buildSummary(cart),
                Expanded(
                  child: SingleChildScrollView(
                    child: Column(
                      children: [
                        _buildDeliveryDetails(),
                        _buildPaymentMethod(),
                      ],
                    ),
                  ),
                ),
                _buildConfirmOrderButton(context, cart, auth),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSummary(CartService cart) {
    return Padding(
      padding: EdgeInsets.all(16),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            'Total',
            style: GoogleFonts.poppins(
              fontWeight: FontWeight.bold,
              fontSize: 18,
            ),
          ),
          Text(
            '${(cart.totalAmount + 10).toStringAsFixed(2)} MAD',
            style: GoogleFonts.poppins(
              fontWeight: FontWeight.bold,
              fontSize: 18,
              color: DeliverooColors.primary,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDeliveryDetails() {
    return Padding(
      padding: EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Delivery Details',
            style: GoogleFonts.poppins(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          SizedBox(height: 16),
          Container(
            height: 200,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(16),
            ),
            clipBehavior: Clip.antiAlias,
            child: FlutterMap(
              mapController: _mapController,
              options: MapOptions(
                initialCenter: _selectedLocation,
                initialZoom: 15.0,
                onTap: (tapPosition, point) {
                  setState(() {
                    _selectedLocation = point;
                    _hasModifiedMap = true;
                  });
                  _updateAddressFromLocation(point);
                },
              ),
              children: [
                TileLayer(
                  urlTemplate: "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
                  subdomains: ['a', 'b', 'c'],
                ),
                MarkerLayer(
                  markers: [
                    Marker(
                      width: 40.0,
                      height: 40.0,
                      point: _selectedLocation,
                      child: Icon(
                        Icons.location_on,
                        color: DeliverooColors.primary,
                        size: 40,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          SizedBox(height: 16),
          TextFormField(
            controller: _addressController,
            decoration: InputDecoration(
              labelText: 'Address',
              border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
              prefixIcon: Icon(Icons.location_on, color: DeliverooColors.primary),
            ),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your address';
              }
              return null;
            },
          ),
          SizedBox(height: 16),
          TextFormField(
            controller: _phoneController,
            decoration: InputDecoration(
              labelText: 'Phone Number',
              border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
              prefixIcon: Icon(Icons.phone, color: DeliverooColors.primary),
            ),
            keyboardType: TextInputType.phone,
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your phone number';
              }
              return null;
            },
          ),
        ],
      ),
    );
  }

  Future<void> _updateAddressFromLocation(LatLng point) async {
    try {
      List<Placemark> placemarks = await placemarkFromCoordinates(point.latitude, point.longitude);
      if (placemarks.isNotEmpty) {
        Placemark place = placemarks[0];
        String address = '${place.street}, ${place.locality}, ${place.country}';
        setState(() {
          _addressController.text = address;
        });
      }
    } catch (e) {
      print('Error getting address: $e');
    }
  }

  Widget _buildPaymentMethod() {
    return Padding(
      padding: EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Payment Method',
            style: GoogleFonts.poppins(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          SizedBox(height: 16),
          RadioListTile(
            title: Text('Pay with Cash'),
            value: 'Cash',
            groupValue: _selectedPaymentMethod,
            onChanged: (value) {
              setState(() {
                _selectedPaymentMethod = value.toString();
              });
            },
            activeColor: DeliverooColors.primary,
          ),
          RadioListTile(
            title: Text('Add New Card'),
            value: 'Card',
            groupValue: _selectedPaymentMethod,
            onChanged: (value) {
              setState(() {
                _selectedPaymentMethod = value.toString();
              });
            },
            activeColor: DeliverooColors.primary,
          ),
        ],
      ),
    );
  }

  Widget _buildConfirmOrderButton(BuildContext context, CartService cart, AuthService auth) {
    return Padding(
      padding: EdgeInsets.all(16),
      child: ElevatedButton(
        child: Text(
          'Confirm Order',
          style: GoogleFonts.poppins(
            fontWeight: FontWeight.bold,
            fontSize: 16,
          ),
        ),
        style: ElevatedButton.styleFrom(
          foregroundColor: Colors.white,
          backgroundColor: DeliverooColors.primary,
          padding: EdgeInsets.symmetric(vertical: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          minimumSize: Size(double.infinity, 50),
        ),
        onPressed: () {
          if (_formKey.currentState!.validate()) {
            if (!_isBottomSheetOpen) {
              setState(() {
                _isBottomSheetOpen = true;
              });
            } else {
              _showConfirmOrderDialog(context, cart, auth);
            }
          } else {
            setState(() {
              _isBottomSheetOpen = true;
            });
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Please fill in all required fields')),
            );
          }
        },
      ),
    );
  }

void _showConfirmOrderDialog(BuildContext context, CartService cart, AuthService auth) {
  showDialog(
    context: context,
    builder: (BuildContext dialogContext) {
      return AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        contentPadding: EdgeInsets.zero,
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TicketOrderSummary(
                total: (cart.totalAmount + 10).toStringAsFixed(2),
                paymentMethod: _selectedPaymentMethod,
                address: _addressController.text,
                phone: _phoneController.text,
              ),
              Padding(
                padding: EdgeInsets.all(16),
                child: Text(
                  'Are you sure you want to place this order?',
                  style: GoogleFonts.poppins(fontSize: 16),
                  textAlign: TextAlign.center,
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            child: Text(
              'Cancel',
              style: GoogleFonts.poppins(color: Colors.grey),
            ),
            onPressed: () => Navigator.of(dialogContext).pop(),
          ),
          ElevatedButton(
            child: Text(
              'Confirm',
              style: GoogleFonts.poppins(fontWeight: FontWeight.bold),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: DeliverooColors.primary,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
            ),
            onPressed: () async {
              print("Confirm button pressed");
              Navigator.of(dialogContext).pop(); // Close the dialog

              if (auth.currentUser == null) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Please log in to place an order')),
                );
                return;
              }

              try {
                print("Processing order");
                String? paymentIntentId;
                if (_selectedPaymentMethod == 'Card') {
                  final PaymentIntent paymentResult = await _paymentService.processPayment(
                    cart.totalAmount + 10,
                    'MAD',
                  );

                  if (paymentResult.status != 'succeeded') {
                    throw Exception('Payment failed: ${paymentResult.status}');
                  }
                  paymentIntentId = paymentResult.id;
                }

                List<Map<String, dynamic>> orderItems = cart.items.entries.map((entry) {
                  return {
                    'product_id': entry.key,
                    'product_name': entry.value.name,
                    'quantity': entry.value.quantity,
                    'price': entry.value.price,
                    'sellerType': entry.value.sellerType,
                  };
                }).toList();

                String sellerType = cart.items.values.first.sellerType;

                String orderId = await _firestoreService.createOrder(
                  userId: auth.currentUser!.uid,
                  totalAmount: cart.totalAmount + 10,
                  orderItems: orderItems,
                  status: _selectedPaymentMethod == 'Cash' ? 'Pending' : 'Paid',
                  paymentMethod: _selectedPaymentMethod,
                  address: _addressController.text,
                  phoneNumber: _phoneController.text,
                  location: GeoPoint(_selectedLocation.latitude, _selectedLocation.longitude),
                  paymentIntentId: paymentIntentId,
                  sellerType: sellerType,
                );

                print("Order created with ID: $orderId");
                cart.clear();

                if (context.mounted) {
                  print("Attempting to navigate to OrderTrackingScreen");
                  await Navigator.of(context).pushReplacement(
                    MaterialPageRoute(
                      builder: (context) => OrderTrackingScreen(orderId: orderId),
                    ),
                  );
                  print("Navigation should have occurred");
                }
              } catch (error) {
                print("Error occurred: $error");
                if (context.mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Error placing order: ${error.toString()}')),
                  );
                }
              }
            },
          ),
        ],
      );
    },
  );
}
void _processPayment(BuildContext context, CartService cart, AuthService auth) async {
    if (auth.currentUser == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please log in to place an order')),
      );
      return;
    }

    try {
      String? paymentIntentId;
      if (_selectedPaymentMethod == 'Card') {
        final PaymentIntent paymentResult = await _paymentService.processPayment(
          cart.totalAmount + 10, // Adding delivery fee
          'MAD', // Moroccan Dirham
        );

        // Check the status of the PaymentIntent
        if (paymentResult.status != 'succeeded') {
          throw Exception('Payment failed: ${paymentResult.status}');
        }
        paymentIntentId = paymentResult.id;
      }

      List<Map<String, dynamic>> orderItems = cart.items.entries.map((entry) {
        return {
          'product_id': entry.key,
          'product_name': entry.value.name,
          'quantity': entry.value.quantity,
          'price': entry.value.price,
          'sellerType': entry.value.sellerType, // Include sellerType in orderItems
        };
      }).toList();

      // Assuming all items have the same sellerType for now
      String sellerType = cart.items.values.first.sellerType;
      // You might need a more complex logic if your cart can have items from different sellers. 

      String orderId = await _firestoreService.createOrder(
        userId: auth.currentUser!.uid,
        totalAmount: cart.totalAmount + 10, // Adding delivery fee
        orderItems: orderItems,
        status: _selectedPaymentMethod == 'Cash' ? 'Pending' : 'Paid',
        paymentMethod: _selectedPaymentMethod,
        address: _addressController.text,
        phoneNumber: _phoneController.text,
        location: GeoPoint(_selectedLocation.latitude, _selectedLocation.longitude),
        paymentIntentId: paymentIntentId,
        sellerType: sellerType, // Pass the sellerType here
      );

      cart.clear();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Order placed successfully!')),
      );

      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => OrderTrackingScreen(orderId: orderId), // Assuming OrderTrackingScreen takes orderId
        ),
      );
    } catch (error) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error placing order: ${error.toString()}')),
      );
    }
  }

  @override
  void dispose() {
    _addressController.dispose();
    _phoneController.dispose();
    super.dispose();
  }
}


class TicketOrderSummary extends StatelessWidget {
  final String total;
  final String paymentMethod;
  final String address;
  final String phone;

  const TicketOrderSummary({
    Key? key,
    required this.total,
    required this.paymentMethod,
    required this.address,
    required this.phone,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFF14B8A6), Color(0xFF06B6D4)],
                begin: Alignment.centerLeft,
                end: Alignment.centerRight,
              ),
              borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
            ),
            padding: EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Order Summary',
                  style: GoogleFonts.poppins(
                    color: Colors.white,
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(height: 8),
                Row(
                  children: [
                    Icon(Icons.camera_alt, color: Colors.white, size: 18),
                    SizedBox(width: 8),
                    Text(
                      'Snap a photo of your ticket!',
                      style: GoogleFonts.poppins(color: Colors.white, fontSize: 14),
                    ),
                  ],
                ),
              ],
            ),
          ),
          Padding(
            padding: EdgeInsets.all(16),
            child: Column(
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      'Total',
                      style: GoogleFonts.poppins(color: Colors.grey[600], fontSize: 16),
                    ),
                    Text(
                      '$total MAD',
                      style: GoogleFonts.poppins(
                        color: Color(0xFF14B8A6),
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 16),
                _buildInfoRow('Payment', paymentMethod),
                _buildInfoRow('Address', address),
                _buildInfoRow('Phone', phone),
              ],
            ),
          ),
          Divider(color: Colors.grey[300], thickness: 1, height: 1),
          Container(
            padding: EdgeInsets.all(16),
            color: Colors.grey[50],
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Order ID',
                  style: GoogleFonts.poppins(color: Colors.grey[500], fontSize: 14),
                ),
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.grey[200],
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text(
                    '#${_generateRandomOrderId()}',
                    style: GoogleFonts.robotoMono(fontSize: 14),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            flex: 2,
            child: Text(
              label,
              style: GoogleFonts.poppins(color: Colors.grey[600], fontSize: 14),
            ),
          ),
          SizedBox(width: 8),
          Expanded(
            flex: 3,
            child: Text(
              value,
              style: GoogleFonts.poppins(fontWeight: FontWeight.w600, fontSize: 14),
              textAlign: TextAlign.right,
            ),
          ),
        ],
      ),
    );
  }

  String _generateRandomOrderId() {
    return (Random().nextDouble() * 1000000).toInt().toString().padLeft(6, '0');
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\favorites_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/auth_service.dart';
import '../services/firestore_service.dart';
import '../widgets/product_card.dart';

class FavoritesScreen extends StatelessWidget {
  final FirestoreService _firestoreService = FirestoreService();

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);
    final userId = authService.currentUser?.uid;

    return Scaffold(
      appBar: AppBar(
        title: Text('My Favorites'),
      ),
      body: userId == null
          ? Center(child: Text('Please log in to view favorites'))
          : FutureBuilder<List<QueryDocumentSnapshot>>(
              future: _firestoreService.getFavorites(userId),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                }
                if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));
                }
                if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return Center(child: Text('No favorites found'));
                }

                return GridView.builder(
                  padding: const EdgeInsets.all(10),
                  itemCount: snapshot.data!.length,
                  itemBuilder: (ctx, i) {
                    final product = snapshot.data![i].data() as Map<String, dynamic>;
                   return ProductCard(
  id: snapshot.data![i].id,
  name: product['name'] ?? 'Unknown Product',
  price: (product['price'] ?? 0).toDouble(),
  imageUrl: product['image'] ?? '',
  unit: product['unit'] ?? 'item',
  description: product['description'] ?? 'No description available',  // Added description field
  isFavorite: true,
  averageRating: (product['averageRating'] ?? 0).toDouble(),  // Added averageRating field
);
                  },
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    childAspectRatio: 3 / 4,
                    crossAxisSpacing: 10,
                    mainAxisSpacing: 10,
                  ),
                );
              },
            ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\home_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:my_delivery_app/screens/cart_screen.dart';
import 'package:my_delivery_app/screens/marjane_screen.dart';
import 'package:my_delivery_app/screens/medicine_screen.dart';
import 'package:my_delivery_app/screens/carrefour_screen.dart';
import 'package:my_delivery_app/screens/profile_screen.dart';
import 'package:my_delivery_app/screens/search_screen.dart';
import 'package:my_delivery_app/screens/traditional_market_screen.dart';
import 'package:my_delivery_app/services/location_service.dart';
import 'package:my_delivery_app/services/marjane_service.dart';
import 'package:shimmer/shimmer.dart';
import 'package:provider/provider.dart';
import 'package:my_delivery_app/services/cart_service.dart';
import 'package:badges/badges.dart' as badges;
import 'package:my_delivery_app/models/category.dart';
import 'package:my_delivery_app/models/product.dart';

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
  static const Color accent = Color(0xFFFF8000);
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final MarjaneService _marjaneService = MarjaneService();
  final LocationService _locationService = LocationService();
  bool _isLoading = true;
  bool _isLoadingProducts = true;
  String _selectedCity = 'Loading...';
  List<Category> _randomCategories = [];
  Map<String, List<Product>> _categoryProducts = {};
  bool _isFirstTimeAddToCart = true;

  @override
  void initState() {
    super.initState();
    _initializeLocation();
  }

  Future<void> _initializeLocation() async {
    String currentCity = await _locationService.getCurrentCity();
    setState(() {
      _selectedCity = currentCity;
      _isLoading = false;
    });
    _loadMarjaneData();
  }

  Future<void> _loadMarjaneData() async {
    try {
      List<Category> allCategories = await _marjaneService.getMarjaneCategories(_selectedCity);
      allCategories.shuffle();
      _randomCategories = allCategories.take(3).toList();

      for (var category in _randomCategories) {
        List<Product> products = await _marjaneService.getCategoryProducts(category.url);
        setState(() {
          _categoryProducts[category.id] = products;
        });
      }
      setState(() {
        _isLoadingProducts = false;
      });
    } catch (e) {
      print('Error loading Marjane data: $e');
      setState(() {
        _isLoadingProducts = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: DeliverooColors.background,
      body: CustomScrollView(
        slivers: [
          _buildSliverAppBar(),
          SliverToBoxAdapter(child: _buildSearchBar()),
          SliverToBoxAdapter(child: _buildCategories()),
          _isLoading || _isLoadingProducts
              ? SliverToBoxAdapter(child: _buildShimmerEffect())
              : SliverList(
                  delegate: SliverChildBuilderDelegate(
                    (context, index) => _buildMarjaneSection(_randomCategories[index]),
                    childCount: _randomCategories.length,
                  ),
                ),
        ],
      ),
    );
  }

Widget _buildSliverAppBar() {
  return SliverAppBar(
    floating: true,
    snap: true,
    elevation: 2,
    backgroundColor: DeliverooColors.primary,
    title: Text(
      'DeliverGo',
      style: GoogleFonts.poppins(
        textStyle: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 24),
      ),
    ),
    actions: [
      Consumer<CartService>(
        builder: (context, cart, child) {
          return Padding(
            padding: const EdgeInsets.only(right: 8.0),
            child: Row(
              children: [
                GestureDetector(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => ProfileScreen()),
                    );
                  },
                  child: CircleAvatar(
                    radius: 11,
                    backgroundColor: Colors.white,
                    child: Icon(
                      Icons.person,
                      color: DeliverooColors.primary,
                      size: 18,
                    ),
                  ),
                ),
                SizedBox(width: 2),
                badges.Badge(
                  position: badges.BadgePosition.topEnd(top: 0, end: 3),
                  badgeAnimation: badges.BadgeAnimation.rotation(
                    animationDuration: Duration(seconds: 1),
                    colorChangeAnimationDuration: Duration(seconds: 1),
                    loopAnimation: false,
                    curve: Curves.fastOutSlowIn,
                    colorChangeAnimationCurve: Curves.easeInCubic,
                  ),
                  badgeStyle: badges.BadgeStyle(
                    shape: badges.BadgeShape.circle,
                    badgeColor: DeliverooColors.accent,
                    padding: EdgeInsets.all(5),
                    borderRadius: BorderRadius.circular(4),
                    borderSide: BorderSide.none,
                    elevation: 0,
                  ),
                  badgeContent: Text(
                    '${cart.itemCount}',
                    style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                  ),
                  child: IconButton(
                    icon: Icon(Icons.shopping_basket, color: Colors.white),
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => CartScreen()),
                      );
                    },
                  ),
                ),
              ],
            ),
          );
        },
      ),
    ],
  );
}
    Widget _buildSearchBar() {
    return Container(
      margin: EdgeInsets.all(16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: DeliverooColors.primary,
            offset: Offset(0, 3),
            blurRadius: 0,
          ),
        ],
      ),
      child: SizedBox(
        width: double.infinity,
        child: OutlinedButton.icon(
          onPressed: () => _navigateToSearchScreen(context),
          icon: Icon(Icons.search, size: 18, color: const Color.fromARGB(255, 60, 60, 60)),
          label: Text(
            'Search in Marjane, Carrefour & more',
            style: GoogleFonts.poppins(
              textStyle: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: DeliverooColors.primary),
            ),
          ),
          style: OutlinedButton.styleFrom(
            foregroundColor: DeliverooColors.primary,
            side: BorderSide(color: DeliverooColors.primary, width: 2),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
            padding: EdgeInsets.symmetric(vertical: 16),
            backgroundColor: Colors.white,
          ),
        ),
      ),
    );
  }
  
  void _navigateToSearchScreen(BuildContext context) {
    Navigator.push(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => SearchScreen(),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          const begin = Offset(0.0, 1.0);
          const end = Offset.zero;
          const curve = Curves.easeInOut;
          var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
          var offsetAnimation = animation.drive(tween);
          return SlideTransition(position: offsetAnimation, child: child);
        },
      ),
    );
  }

Widget _buildCategories() {
  return Container(
    height: 140,
    child: ListView(
      scrollDirection: Axis.horizontal,
      padding: EdgeInsets.symmetric(horizontal: 16),
      children: [
        _buildCategoryItem('Marjane', 'assets/images/marjane.png', () {
          _navigateWithFadeTransition(MarjaneScreen(location: 'casablanca'));
        }),
        _buildCategoryItem('Carrefour', 'assets/images/carrefour.jpg', () {
          _navigateWithFadeTransition(CarrefourScreen(location: 'casablanca'));
        }),
        _buildCategoryItem('Pharmacy', 'assets/images/pharmacy.jpg', () {
          _navigateWithFadeTransition(MedicineScreen());
        }),
        _buildCategoryItem('Traditional', 'assets/images/traditional.png', () {
          _navigateWithFadeTransition(TraditionalMarketScreen(location: 'casablanca'));
        }),
      ],
    ),
  );
}

void _navigateWithFadeTransition(Widget screen) {
  Navigator.of(context).push(
    PageRouteBuilder(
      pageBuilder: (context, animation, secondaryAnimation) => screen,
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        return FadeTransition(opacity: animation, child: child);
      },
    ),
  );
}
  Widget _buildCategoryItem(String label, dynamic icon, VoidCallback onTap) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        width: 90,
        margin: EdgeInsets.only(right: 16),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 64,
              height: 64,
              decoration: BoxDecoration(
                color: DeliverooColors.primary.withOpacity(0.1),
                shape: BoxShape.circle,
                image: icon is String
                    ? DecorationImage(
                        image: AssetImage(icon),
                        fit: BoxFit.cover,
                      )
                    : null,
              ),
              child: icon is IconData ? Icon(icon, color: DeliverooColors.primary, size: 32) : null,
            ),
            SizedBox(height: 8),
            Text(
              label,
              style: GoogleFonts.poppins(
                textStyle: TextStyle(fontSize: 13, fontWeight: FontWeight.w500, color: DeliverooColors.textDark),
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMarjaneSection(Category category) {
    List<Product> products = _categoryProducts[category.id] ?? [];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                child: Text(
                  _truncateWithEllipsis(category.name, 14),
                  style: GoogleFonts.poppins(
                    fontSize: 22,
                    fontWeight: FontWeight.bold,
                    color: DeliverooColors.textDark,
                  ),
                  overflow: TextOverflow.ellipsis,
                ),
              ),
              GestureDetector(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => MarjaneScreen(location: 'casablanca')),
                  );
                },
                child: Text(
                  "See all",
                  style: GoogleFonts.poppins(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: DeliverooColors.primary,
                  ),
                ),
              ),
            ],
          ),
        ),
        Container(
          height: 320,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: products.length,
            itemBuilder: (context, index) {
              return _buildProductCard(products[index]);
            },
          ),
        ),
      ],
    );
  }

  String _truncateWithEllipsis(String text, int maxLength) {
    return (text.length <= maxLength)
        ? text
        : '${text.substring(0, maxLength)}...';
  }

  void _showFirstTimeCartDialog(Product product) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (BuildContext context) {
        return Container(
          padding: EdgeInsets.all(20),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'Item Added to Cart',
                style: GoogleFonts.poppins(
                  fontSize: 22,
                  fontWeight: FontWeight.bold,
                  color: DeliverooColors.textDark,
                ),
              ),
              SizedBox(height: 20),
              Text(
                'Would you like to pay now or continue shopping?',
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  color: DeliverooColors.textLight,
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 30),
              Row(
                children: [
                  Expanded(
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: Color.fromARGB(255, 1, 177, 163),
                            offset: Offset(0, 4),
                            blurRadius: 0,
                          ),
                        ],
                      ),
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.pop(context);
                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => CartScreen()),
                          );
                        },
                        child: Text(
                          'Buy now?',
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        style: ElevatedButton.styleFrom(
                          foregroundColor: Colors.white,
                          backgroundColor: DeliverooColors.primary,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          padding: EdgeInsets.symmetric(vertical: 16),
                          elevation: 0,
                        ),
                      ),
                    ),
                  ),
                  SizedBox(width: 16),
                  Expanded(
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: DeliverooColors.primary,
                            offset: Offset(0, 4),
                            blurRadius: 0,
                          ),
                        ],
                      ),
                      child: OutlinedButton(
                        onPressed: () {
                          Navigator.pop(context);
                        },
                        child: Text(
                          'Continue',
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: DeliverooColors.primary,
                          side: BorderSide(color: DeliverooColors.primary, width: 2),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          padding: EdgeInsets.symmetric(vertical: 16),
                          backgroundColor: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildProductCard(Product product) {
    return Container(
      width: 200,
      height: 300,
      margin: EdgeInsets.only(left: 16, bottom: 16, right: 8),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Stack(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                child: Image.network(
                  product.imageUrl,
                  width: 200,
                  height: 150,
                  fit: BoxFit.cover,
                ),
              ),
              Positioned(
                top: 8,
                right: 8,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: DeliverooColors.primary.withOpacity(0.9),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '${product.price.toStringAsFixed(2)} MAD',
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
            ],
          ),
          Expanded(
            child: Padding(
              padding: EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    product.name,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: DeliverooColors.textDark,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  Row(
                    children: [
                      Icon(Icons.star, color: DeliverooColors.accent, size: 16),
                      SizedBox(width: 4),
                      Text(
                        product.averageRating.toStringAsFixed(1),
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                          color: DeliverooColors.textLight,
                        ),
                      ),
                      SizedBox(width: 8),
                      Text(
                        '(${product.numberOfRatings})',
                        style: GoogleFonts.poppins(
                          fontSize: 12,
                          color: DeliverooColors.textLight,
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 8),
                  SizedBox(
                    width: double.infinity,
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: DeliverooColors.primary,
                            offset: Offset(0, 4),
                            blurRadius: 0,
                          ),
                        ],
                      ),
                      child: OutlinedButton.icon(
                        onPressed: () {
                          Provider.of<CartService>(context, listen: false)
                              .addItem(product.id, product.name, product.price, product.imageUrl, product.sellerType);
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text(
                                'Added to cart',
                                style: GoogleFonts.poppins(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w500,
                                  color: Colors.white,
                                ),
                              ),
                              backgroundColor: DeliverooColors.primary,
                              behavior: SnackBarBehavior.floating,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                            ),
                          );
                        },
                        icon: Icon(Icons.add_shopping_cart, size: 18),
                        label: Text('Add to Cart', style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: DeliverooColors.primary,
                          side: BorderSide(color: DeliverooColors.primary, width: 2),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          padding: EdgeInsets.symmetric(vertical: 12),
                          backgroundColor: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildShimmerEffect() {
    return Shimmer.fromColors(
      baseColor: Colors.grey[300]!,
      highlightColor: Colors.grey[100]!,
      child: Column(
        children: List.generate(3, (index) => _buildShimmerSection()),
      ),
    );
  }

  Widget _buildShimmerSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Container(
                width: 150,
                height: 24,
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
              ),
              Container(
                width: 60,
                height: 20,
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4),
                ),
              ),
            ],
          ),
        ),
        Container(
          height: 320,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: 3,
            itemBuilder: (context, index) {
              return Container(
                width: 200,
                height: 300,
                margin: EdgeInsets.only(left: 16, bottom: 16, right: 8),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(16),
                  color: Colors.white,
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      width: 200,
                      height: 150,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                      ),
                    ),
                    Padding(
                      padding: EdgeInsets.all(12),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Container(
                            width: 140,
                            height: 16,
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(4),
                            ),
                          ),
                          SizedBox(height: 8),
                          Container(
                            width: 100,
                            height: 16,
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(4),
                            ),
                          ),
                          SizedBox(height: 12),
                          Container(
                            width: double.infinity,
                            height: 40,
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              );
            },
          ),
        ),
      ],
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\login_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:google_fonts/google_fonts.dart';
import '../services/auth_service.dart';
import '../models/custom_user.dart';
import '../services/firestore_service.dart';
import '../services/notification_service.dart';

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
}

class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  String _email = '';
  String _password = '';
  bool _isPasswordVisible = false;
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);
    final firestoreService = FirestoreService();
    final notificationService = Provider.of<NotificationService>(context, listen: false);

    return Scaffold(
      backgroundColor: DeliverooColors.background,
      body: SafeArea(
        child: SingleChildScrollView(
          child: Padding(
            padding: EdgeInsets.symmetric(horizontal: 24.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                SizedBox(height: 60),
                Text(
                  'FoodDash',
                  style: GoogleFonts.poppins(
                    textStyle: TextStyle(
                      color: DeliverooColors.primary,
                      fontWeight: FontWeight.bold,
                      fontSize: 36,
                    ),
                  ),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 24),
                Text(
                  'Welcome Back',
                  style: GoogleFonts.poppins(
                    textStyle: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.w600,
                      color: DeliverooColors.textDark,
                    ),
                  ),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 48),
                Form(
                  key: _formKey,
                  child: Column(
                    children: [
                      _buildTextField(
                        icon: Icons.email,
                        hintText: 'Email',
                        onSaved: (value) => _email = value!,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter your email';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: 16),
                      _buildTextField(
                        icon: Icons.lock,
                        hintText: 'Password',
                        obscureText: !_isPasswordVisible,
                        onSaved: (value) => _password = value!,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter your password';
                          }
                          return null;
                        },
                        suffixIcon: IconButton(
                          icon: Icon(
                            _isPasswordVisible ? Icons.visibility : Icons.visibility_off,
                            color: DeliverooColors.textLight,
                          ),
                          onPressed: () {
                            setState(() {
                              _isPasswordVisible = !_isPasswordVisible;
                            });
                          },
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 24),
                ElevatedButton(
                  child: Padding(
                    padding: EdgeInsets.symmetric(vertical: 16.0),
                    child: _isLoading
                        ? CircularProgressIndicator(color: Colors.white)
                        : Text(
                            'Login',
                            style: GoogleFonts.poppins(
                              textStyle: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
                            ),
                          ),
                  ),
                  style: ElevatedButton.styleFrom(
                    foregroundColor: Colors.white,
                    backgroundColor: DeliverooColors.primary,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                    elevation: 0,
                  ),
                  onPressed: _isLoading ? null : () async {
                    if (_formKey.currentState!.validate()) {
                      setState(() {
                        _isLoading = true;
                      });
                      _formKey.currentState!.save();
                      try {
                        final CustomUser? user = await authService.signInWithEmailAndPassword(_email, _password, context);
                        if (user != null) {
                          Navigator.of(context).pushReplacementNamed('/home');
                        }
                      } catch (e) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('Failed to sign in: ${e.toString()}'),
                            backgroundColor: Colors.red,
                          ),
                        );
                      } finally {
                        setState(() {
                          _isLoading = false;
                        });
                      }
                    }
                  },
                ),
                SizedBox(height: 16),
                TextButton(
                  child: Text(
                    'Don\'t have an account? Register',
                    style: GoogleFonts.poppins(
                      textStyle: TextStyle(color: DeliverooColors.primary, fontWeight: FontWeight.w500),
                    ),
                  ),
                  onPressed: () {
                    Navigator.of(context).pushNamed('/register');
                  },
                ),
                SizedBox(height: 24),
                OutlinedButton(
                  child: Padding(
                    padding: EdgeInsets.symmetric(vertical: 12.0),
                    child: Text(
                      'Skip Login',
                      style: GoogleFonts.poppins(
                        textStyle: TextStyle(fontSize: 16, color: DeliverooColors.textDark, fontWeight: FontWeight.w500),
                      ),
                    ),
                  ),
                  style: OutlinedButton.styleFrom(
                    side: BorderSide(color: DeliverooColors.primary),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  onPressed: () {
                    Navigator.of(context).pushReplacementNamed('/home');
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required IconData icon,
    required String hintText,
    required Function(String?) onSaved,
    required String? Function(String?) validator,
    bool obscureText = false,
    Widget? suffixIcon,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: DeliverooColors.textLight.withOpacity(0.5)),
      ),
      child: TextFormField(
        decoration: InputDecoration(
          prefixIcon: Icon(icon, color: DeliverooColors.primary),
          hintText: hintText,
          hintStyle: GoogleFonts.poppins(textStyle: TextStyle(color: DeliverooColors.textLight)),
          border: InputBorder.none,
          contentPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 16),
          suffixIcon: suffixIcon,
        ),
        style: GoogleFonts.poppins(textStyle: TextStyle(color: DeliverooColors.textDark)),
        obscureText: obscureText,
        validator: validator,
        onSaved: onSaved,
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\marjane_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:my_delivery_app/screens/cart_screen.dart';
import 'package:my_delivery_app/screens/search_screen.dart';
import 'package:my_delivery_app/services/cart_service.dart';
import 'package:provider/provider.dart';
import '../services/marjane_service.dart';
import '../models/category.dart';
import '../models/product.dart';
import 'package:shimmer/shimmer.dart';
import 'package:badges/badges.dart' as badges;

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
  static const Color accent = Color(0xFFFF8000);
}

class MarjaneScreen extends StatefulWidget {
  final String location;

  const MarjaneScreen({Key? key, required this.location}) : super(key: key);

  @override
  _MarjaneScreenState createState() => _MarjaneScreenState();
}

class _MarjaneScreenState extends State<MarjaneScreen> {
  final MarjaneService _marjaneService = MarjaneService();
  final TextEditingController _searchController = TextEditingController();

  Future<List<Category>> _fetchCategories() async {
    return await _marjaneService.getMarjaneCategories(widget.location);
  }

  Future<List<Product>> _fetchCategoryProducts(String categoryUrl) async {
    return await _marjaneService.getCategoryProducts(categoryUrl);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: DeliverooColors.background,
      body: CustomScrollView(
        slivers: [
          _buildSliverAppBar(),
          SliverToBoxAdapter(
            child: _buildSearchBox(),
          ),
          FutureBuilder<List<Category>>(
            future: _fetchCategories(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return SliverToBoxAdapter(child: _buildCategoryShimmerEffect());
              } else if (snapshot.hasError) {
                return SliverToBoxAdapter(
                  child: Center(child: Text('Error: ${snapshot.error}')),
                );
              } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return SliverToBoxAdapter(
                  child: Center(child: Text('No categories found')),
                );
              } else {
                return SliverList(
                  delegate: SliverChildBuilderDelegate(
                    (context, index) => _buildMarjaneSection(snapshot.data![index]),
                    childCount: snapshot.data!.length,
                  ),
                );
              }
            },
          ),
        ],
      ),
    );
  }

  Widget _buildSliverAppBar() {
    return SliverAppBar(
      floating: true,
      snap: true,
      elevation: 2,
      backgroundColor: DeliverooColors.primary,
      iconTheme: IconThemeData(color: Colors.white),
      title: Text(
        'Marjane',
        style: GoogleFonts.poppins(
          textStyle: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 24),
        ),
      ),
      actions: [
        Consumer<CartService>(
          builder: (context, cart, child) {
            return Padding(
              padding: const EdgeInsets.only(right: 16.0),
              child: badges.Badge(
                position: badges.BadgePosition.topEnd(top: 0, end: 3),
                badgeAnimation: badges.BadgeAnimation.rotation(
                  animationDuration: Duration(seconds: 1),
                  colorChangeAnimationDuration: Duration(seconds: 1),
                  loopAnimation: false,
                  curve: Curves.fastOutSlowIn,
                  colorChangeAnimationCurve: Curves.easeInCubic,
                ),
                badgeStyle: badges.BadgeStyle(
                  shape: badges.BadgeShape.circle,
                  badgeColor: DeliverooColors.accent,
                  padding: EdgeInsets.all(5),
                  borderRadius: BorderRadius.circular(4),
                  borderSide: BorderSide.none,
                  elevation: 0,
                ),
                badgeContent: Text(
                  '${cart.itemCount}',
                  style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                ),
                child: IconButton(
                  icon: Icon(Icons.shopping_basket, color: Colors.white),
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => CartScreen()),
                    );
                  },
                ),
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildSearchBox() {
    return Container(
      margin: EdgeInsets.all(16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: DeliverooColors.primary,
            offset: Offset(0, 3),
            blurRadius: 0,
          ),
        ],
      ),
      child: SizedBox(
        width: double.infinity,
        child: OutlinedButton.icon(
          onPressed: () => _navigateToSearchScreen(context),
          icon: Icon(Icons.search, size: 18, color: const Color.fromARGB(255, 60, 60, 60)),
          label: Text(
            'Search in Marjane',
            style: GoogleFonts.poppins(
              textStyle: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: DeliverooColors.primary),
            ),
          ),
          style: OutlinedButton.styleFrom(
            foregroundColor: DeliverooColors.primary,
            side: BorderSide(color: DeliverooColors.primary, width: 2),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
            padding: EdgeInsets.symmetric(vertical: 16),
            backgroundColor: Colors.white,
          ),
        ),
      ),
    );
  }
  
  void _navigateToSearchScreen(BuildContext context) {
    Navigator.push(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => SearchScreen(),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          const begin = Offset(0.0, 1.0);
          const end = Offset.zero;
          const curve = Curves.easeInOut;
          var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
          var offsetAnimation = animation.drive(tween);
          return SlideTransition(position: offsetAnimation, child: child);
        },
      ),
    );
  }

  Widget _buildMarjaneSection(Category category) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          child: Text(
            category.name,
            style: GoogleFonts.poppins(
              fontSize: 22,
              fontWeight: FontWeight.bold,
              color: DeliverooColors.textDark,
            ),
          ),
        ),
        Container(
          height: 320,
          child: FutureBuilder<List<Product>>(
            future: _fetchCategoryProducts(category.url),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return _buildProductShimmerEffect();
              } else if (snapshot.hasError) {
                return Center(child: Text('Error loading products'));
              } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return Center(child: Text('No products available'));
              } else {
                return ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: snapshot.data!.length,
                  itemBuilder: (context, index) {
                    return _buildProductCard(snapshot.data![index]);
                  },
                );
              }
            },
          ),
        ),
      ],
    );
  }

  Widget _buildProductCard(Product product) {
    return Container(
      width: 200,
      height: 300,
      margin: EdgeInsets.only(left: 16, bottom: 16, right: 8),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Stack(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                child: Image.network(
                  product.imageUrl,
                  width: 200,
                  height: 150,
                  fit: BoxFit.cover,
                ),
              ),
              Positioned(
                top: 8,
                right: 8,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: DeliverooColors.primary.withOpacity(0.9),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '${product.price.toStringAsFixed(2)} MAD',
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
            ],
          ),
          Expanded(
            child: Padding(
              padding: EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    product.name,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: DeliverooColors.textDark,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  Row(
                    children: [
                      Icon(Icons.star, color: DeliverooColors.accent, size: 16),
                      SizedBox(width: 4),
                      Text(
                        product.averageRating.toStringAsFixed(1),
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                          color: DeliverooColors.textLight,
                        ),
                      ),
                      SizedBox(width: 8),
                      Text(
                        '(${product.numberOfRatings})',
                        style: GoogleFonts.poppins(
                          fontSize: 12,
                          color: DeliverooColors.textLight,
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 8),
                  SizedBox(
                    width: double.infinity,
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: DeliverooColors.primary,
                            offset: Offset(0, 4),
                            blurRadius: 0,
                          ),
                        ],
                      ),
                      child: OutlinedButton.icon(
                        onPressed: () {
                          Provider.of<CartService>(context, listen: false)
    .addItem(product.id, product.name, product.price, product.imageUrl, product.sellerType); // Pass sellerType
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text(
                                'Added to cart',
                                style: GoogleFonts.poppins(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w500,
                                  color: Colors.white,
                                ),
                              ),
                              backgroundColor: DeliverooColors.primary,
                              behavior: SnackBarBehavior.floating,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                            ),
                          );
                        },
                        icon: Icon(Icons.add_shopping_cart, size: 18),
                        label: Text('Add to Cart', style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: DeliverooColors.primary,
                          side: BorderSide(color: DeliverooColors.primary, width: 2),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          padding: EdgeInsets.symmetric(vertical: 12),
                          backgroundColor: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCategoryShimmerEffect() {
    return Shimmer.fromColors(
      baseColor: Colors.grey[300]!,
      highlightColor: Colors.grey[100]!,
      child: Column(
        children: [
          _buildSearchBoxShimmer(),
          ...List.generate(3, (index) => _buildShimmerSection()),
        ],
      ),
    );
  }

  Widget _buildSearchBoxShimmer() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Container(
        height: 48,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

  Widget _buildProductShimmerEffect() {
    return ListView.builder(
      scrollDirection: Axis.horizontal,
      itemCount: 3,
      itemBuilder: (context, index) {
        return Container(
          width: 200,
          height: 300,
          margin: EdgeInsets.only(left: 16, bottom: 16, right: 8),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            color: Colors.white,
          ),
          child: Shimmer.fromColors(
            baseColor: Colors.grey[300]!,
            highlightColor: Colors.grey[100]!,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  width: 200,
                  height: 150,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                  ),
                ),
                Padding(
                  padding: EdgeInsets.all(12),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        width: 140,
                        height: 16,
                        color: Colors.white,
                      ),
                      SizedBox(height: 8),
                      Container(
                        width: 100,
                        height: 16,
                        color: Colors.white,
                      ),
                      SizedBox(height: 12),
                      Container(
                        width: double.infinity,
                        height: 40,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(20),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildShimmerSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          child: Container(
            width: 150,
            height: 24,
            color: Colors.white,
          ),
        ),
        Container(
          height: 320,
          child: _buildProductShimmerEffect(),
        ),
      ],
    );
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\medicine_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../services/medicine_service.dart';
import '../models/product.dart';
import 'package:shimmer/shimmer.dart';
import 'package:provider/provider.dart';
import '../services/cart_service.dart';
import './cart_screen.dart';
import 'package:badges/badges.dart' as badges;

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
  static const Color accent = Color(0xFFFF8000);
}

class MedicineScreen extends StatefulWidget {
  @override
  _MedicineScreenState createState() => _MedicineScreenState();
}

class _MedicineScreenState extends State<MedicineScreen> {
  final MedicineService _medicineService = MedicineService();
  List<Product> _products = [];
  List<Product> _filteredProducts = [];
  bool _isLoading = true;
  String _searchQuery = '';
  String _selectedCategory = 'All';

  @override
  void initState() {
    super.initState();
    _loadProducts();
  }

  Future<void> _loadProducts() async {
    try {
      final products = await _medicineService.getMedicineProducts();
      setState(() {
        _products = products;
        _filteredProducts = products;
        _isLoading = false;
      });
    } catch (e) {
      print('Error loading products: $e');
      setState(() => _isLoading = false);
    }
  }

  void _filterProducts() {
    setState(() {
      _filteredProducts = _products.where((product) {
        final nameMatch = product.name.toLowerCase().contains(_searchQuery.toLowerCase());
        final categoryMatch = _selectedCategory == 'All' || product.category == _selectedCategory;
        return nameMatch && categoryMatch;
      }).toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: DeliverooColors.background,
      body: CustomScrollView(
        slivers: [
          _buildSliverAppBar(),
          _buildCategoryFilter(),
          _isLoading ? _buildShimmerGrid() : _buildProductGrid(),
        ],
      ),
    );
  }

  Widget _buildSliverAppBar() {
    return SliverAppBar(
      floating: true,
      snap: true,
      elevation: 2,
      backgroundColor: DeliverooColors.primary,
      iconTheme: IconThemeData(color: Colors.white),
      title: Text(
        'Medicine',
        style: GoogleFonts.poppins(
          textStyle: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 24),
        ),
      ),
      actions: [
        Consumer<CartService>(
          builder: (context, cart, child) {
            return Padding(
              padding: const EdgeInsets.only(right: 16.0),
              child: badges.Badge(
                position: badges.BadgePosition.topEnd(top: 0, end: 3),
                badgeAnimation: badges.BadgeAnimation.rotation(
                  animationDuration: Duration(seconds: 1),
                  colorChangeAnimationDuration: Duration(seconds: 1),
                  loopAnimation: false,
                  curve: Curves.fastOutSlowIn,
                  colorChangeAnimationCurve: Curves.easeInCubic,
                ),
                badgeStyle: badges.BadgeStyle(
                  shape: badges.BadgeShape.circle,
                  badgeColor: DeliverooColors.accent,
                  padding: EdgeInsets.all(5),
                  borderRadius: BorderRadius.circular(4),
                  borderSide: BorderSide.none,
                  elevation: 0,
                ),
                badgeContent: Text(
                  '${cart.itemCount}',
                  style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                ),
                child: IconButton(
                  icon: Icon(Icons.shopping_basket, color: Colors.white),
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => CartScreen()),
                    );
                  },
                ),
              ),
            );
          },
        ),
      ],
    );
  }

  

  Widget _buildCategoryFilter() {
    final categories = ['All', ...Set.from(_products.map((p) => p.category))];
    return SliverToBoxAdapter(
      child: Container(
        height: 50,
        margin: EdgeInsets.symmetric(vertical: 16),
        child: ListView.builder(
          scrollDirection: Axis.horizontal,
          itemCount: categories.length,
          itemBuilder: (context, index) {
            final category = categories[index];
            return Padding(
              padding: EdgeInsets.only(left: index == 0 ? 16 : 8, right: 8),
              child: ChoiceChip(
                label: Text(category),
                selected: _selectedCategory == category,
                onSelected: (selected) {
                  if (selected) {
                    setState(() {
                      _selectedCategory = category;
                      _filterProducts();
                    });
                  }
                },
                selectedColor: DeliverooColors.primary,
                backgroundColor: Colors.white,
                labelStyle: GoogleFonts.poppins(
                  textStyle: TextStyle(
                    color: _selectedCategory == category ? Colors.white : DeliverooColors.textDark,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  Widget _buildProductGrid() {
    final groupedProducts = groupProductsByCategory(_filteredProducts);
    
    return SliverList(
      delegate: SliverChildBuilderDelegate(
        (context, index) {
          final category = groupedProducts.keys.elementAt(index);
          final products = groupedProducts[category]!;
          
          return Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                child: Text(
                  category,
                  style: GoogleFonts.poppins(
                    fontSize: 22,
                    fontWeight: FontWeight.bold,
                    color: DeliverooColors.textDark,
                  ),
                ),
              ),
              Container(
                height: 320,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  padding: EdgeInsets.symmetric(horizontal: 16),
                  itemCount: products.length,
                  itemBuilder: (context, index) {
                    return _buildProductCard(products[index]);
                  },
                ),
              ),
              SizedBox(height: 16),
            ],
          );
        },
        childCount: groupedProducts.length,
      ),
    );
  }

  Map<String, List<Product>> groupProductsByCategory(List<Product> products) {
    return groupBy(products, (Product p) => p.category);
  }

  Map<K, List<T>> groupBy<T, K>(Iterable<T> values, K Function(T) keyFunction) {
    return values.fold(<K, List<T>>{}, (Map<K, List<T>> map, T element) {
      K key = keyFunction(element);
      if (!map.containsKey(key)) {
        map[key] = <T>[];
      }
      map[key]!.add(element);
      return map;
    });
  }

  Widget _buildProductCard(Product product) {
    return Container(
      width: 200,
      height: 300,
      margin: EdgeInsets.only(bottom: 16, right: 16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Stack(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                child: Image.network(
                  product.imageUrl,
                  width: 200,
                  height: 150,
                  fit: BoxFit.cover,
                ),
              ),
              Positioned(
                top: 8,
                right: 8,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: DeliverooColors.primary.withOpacity(0.9),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '${product.price.toStringAsFixed(2)} MAD',
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
            ],
          ),
          Expanded(
            child: Padding(
              padding: EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    product.name,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: DeliverooColors.textDark,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                 
                  SizedBox(
                    width: double.infinity,
                    child: OutlinedButton.icon(
                      onPressed: () {
                       Provider.of<CartService>(context, listen: false)
    .addItem(product.id, product.name, product.price, product.imageUrl, product.sellerType); // Pass sellerType
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text(
                              'Added to cart',
                              style: GoogleFonts.poppins(
                                fontSize: 14,
                                fontWeight: FontWeight.w500,
                                color: Colors.white,
                              ),
                            ),
                            backgroundColor: DeliverooColors.primary,
                            behavior: SnackBarBehavior.floating,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        );
                      },
                      icon: Icon(Icons.add_shopping_cart, size: 18),
                      label: Text('Add to Cart', style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: DeliverooColors.primary,
                        side: BorderSide(color: DeliverooColors.primary, width: 2),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        padding: EdgeInsets.symmetric(vertical: 12),
                        backgroundColor: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildShimmerGrid() {
    return SliverList(
      delegate: SliverChildBuilderDelegate(
        (context, index) {
          return Shimmer.fromColors(
            baseColor: Colors.grey[300]!,
            highlightColor: Colors.grey[100]!,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                  child: Container(
                    width: 150,
                    height: 24,
                    color: Colors.white,
                  ),
                ),
                Container(
                  height: 320,
                  child: ListView.builder(
                    scrollDirection: Axis.horizontal,
                    itemCount: 3,
                    itemBuilder: (context, productIndex) {
                      return Container(
                        width: 200,
                        height: 300,
                        margin: EdgeInsets.only(left: 16, bottom: 16, right: 8),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(16),
                          color: Colors.white,
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Container(
                              width: 200,
                              height: 150,
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                              ),
                            ),
                            Padding(
                              padding: EdgeInsets.all(12),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Container(
                                    width: 140,
                                    height: 16,
                                    color: Colors.white,
                                  ),
                                  SizedBox(height: 8),
                                  Container(
                                    width: 100,
                                    height: 16,
                                    color: Colors.white,
                                  ),
                                  SizedBox(height: 12),
                                  Container(
                                    width: double.infinity,
                                    height: 40,
                                    decoration: BoxDecoration(
                                      color: Colors.white,
                                      borderRadius: BorderRadius.circular(20),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      );
                    },
                  ),
                ),
              ],
            ),
          );
        },
        childCount: 3,
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\order_confirmation_screen.dart
import 'package:flutter/material.dart';
import '../services/firestore_service.dart';

class OrderConfirmationScreen extends StatelessWidget {
  final String orderId;
  final FirestoreService _firestoreService = FirestoreService();

  OrderConfirmationScreen({required this.orderId});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Order Confirmation'),
      ),
      body: FutureBuilder(
        future: _firestoreService.getOrderDetails(orderId),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          if (!snapshot.hasData) {
            return Center(child: Text('No order data found'));
          }

          var orderData = snapshot.data!.data() as Map<String, dynamic>;
          int pointsEarned = (orderData['total_amount'] / 10).floor();

          return Padding(
            padding: EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Thank you for your order!', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
                SizedBox(height: 20),
                Text('Order ID: $orderId', style: TextStyle(fontSize: 18)),
                Text('Status: ${orderData['status']}', style: TextStyle(fontSize: 18)),
                Text('Total Amount: ${orderData['total_amount'].toStringAsFixed(2)} MAD', style: TextStyle(fontSize: 18)),
                Text('Points Earned: $pointsEarned', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.green)),
                SizedBox(height: 20),
                Text('Order Items:', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                Expanded(
                  child: ListView.builder(
                    itemCount: (orderData['items'] as List).length,
                    itemBuilder: (ctx, index) {
                      var item = (orderData['items'] as List)[index];
                      return ListTile(
                        title: Text(item['product_name']),
                        subtitle: Text('Quantity: ${item['quantity']}'),
                        trailing: Text('${(item['price'] * item['quantity']).toStringAsFixed(2)} MAD'),
                      );
                    },
                  ),
                ),
                ElevatedButton(
                  child: Text('Back to Home'),
                  onPressed: () {
                    Navigator.of(context).pushReplacementNamed('/');
                  },
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\order_history_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/auth_service.dart';
import '../services/firestore_service.dart';

class OrderHistoryScreen extends StatelessWidget {
  final FirestoreService _firestoreService = FirestoreService();

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);
    final userId = authService.currentUser?.uid;

    return Scaffold(
      appBar: AppBar(
        title: Text('Order History'),
      ),
      body: userId == null
          ? Center(child: Text('Please log in to view order history'))
          : FutureBuilder<List<QueryDocumentSnapshot>>(
              future: _firestoreService.getOrderHistory(userId),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                }
                if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));
                }
                if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return Center(child: Text('No orders found'));
                }

                return ListView.builder(
                  itemCount: snapshot.data!.length,
                  itemBuilder: (ctx, i) {
                    var order = snapshot.data![i].data() as Map<String, dynamic>;
                    return Card(
                      margin: EdgeInsets.all(10),
                      child: ListTile(
                        title: Text('Order #${snapshot.data![i].id}'),
                        subtitle: Text('Status: ${order['status']}'),
                        trailing: Text('${order['total_amount'].toStringAsFixed(2)} MAD'),
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => OrderDetailsScreen(orderId: snapshot.data![i].id),
                            ),
                          );
                        },
                      ),
                    );
                  },
                );
              },
            ),
    );
  }
}

class OrderDetailsScreen extends StatelessWidget {
  final String orderId;
  final FirestoreService _firestoreService = FirestoreService();

  OrderDetailsScreen({required this.orderId});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Order Details'),
      ),
      body: StreamBuilder<DocumentSnapshot>(
        stream: _firestoreService.getOrderStatusStream(orderId),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          if (!snapshot.hasData || !snapshot.data!.exists) {
            return Center(child: Text('Order not found'));
          }

          var order = snapshot.data!.data() as Map<String, dynamic>;

          return Padding(
            padding: EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Order #$orderId', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                SizedBox(height: 10),
                Text('Status: ${order['status']}'),
                Text('Total Amount: ${order['total_amount'].toStringAsFixed(2)} MAD'),
                Text('Date: ${(order['created_at'] as Timestamp).toDate().toString()}'),
                SizedBox(height: 20),
                Text('Order Items:', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                Expanded(
                  child: FutureBuilder<QuerySnapshot>(
                    future: snapshot.data!.reference.collection('order_items').get(),
                    builder: (context, itemsSnapshot) {
                      if (itemsSnapshot.connectionState == ConnectionState.waiting) {
                        return Center(child: CircularProgressIndicator());
                      }
                      if (itemsSnapshot.hasError) {
                        return Center(child: Text('Error: ${itemsSnapshot.error}'));
                      }
                      if (!itemsSnapshot.hasData || itemsSnapshot.data!.docs.isEmpty) {
                        return Center(child: Text('No items found'));
                      }

                      return ListView.builder(
                        itemCount: itemsSnapshot.data!.docs.length,
                        itemBuilder: (ctx, i) {
                          var item = itemsSnapshot.data!.docs[i].data() as Map<String, dynamic>;
                          return ListTile(
                            title: Text(item['product_name']),
                            subtitle: Text('Quantity: ${item['quantity']}'),
                            trailing: Text('${item['price'].toStringAsFixed(2)} MAD'),
                          );
                        },
                      );
                    },
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\order_tracking_screen.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_fonts/google_fonts.dart';
import '../services/order_service.dart';
import 'home_screen.dart';
import '../services/chat_service.dart';

class OrderTrackingScreen extends StatefulWidget {
  final String orderId;
  final OrderService _orderService = OrderService();

  OrderTrackingScreen({required this.orderId});

  @override
  _OrderTrackingScreenState createState() => _OrderTrackingScreenState();
}

class _OrderTrackingScreenState extends State<OrderTrackingScreen> {
  final TextEditingController _messageController = TextEditingController();
  final ChatService _chatService = ChatService();
  final ScrollController _scrollController = ScrollController();

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        _navigateToHomeScreen(context);
        return false;
      },
      child: Scaffold(
        backgroundColor: Colors.white,
        appBar: AppBar(
          backgroundColor: Colors.white,
          elevation: 0,
          leading: IconButton(
            icon: Icon(Icons.arrow_back_ios, color: Colors.black87),
            onPressed: () => _navigateToHomeScreen(context),
          ),
          title: Text(
            'Order Tracking',
            style: GoogleFonts.poppins(
              color: Colors.black87,
              fontWeight: FontWeight.w600,
              fontSize: 20,
            ),
          ),
        ),
        body: StreamBuilder<Map<String, dynamic>>(
          stream: widget._orderService.getOrderStream(widget.orderId),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return Center(child: CircularProgressIndicator(color: Colors.teal));
            }

            if (snapshot.hasError) {
              return Center(
                child: Text(
                  'Error: ${snapshot.error}',
                  style: GoogleFonts.poppins(color: Colors.red),
                ),
              );
            }

            if (!snapshot.hasData) {
              return Center(
                child: Text(
                  'Order not found',
                  style: GoogleFonts.poppins(fontSize: 18),
                ),
              );
            }

            final orderData = snapshot.data!;

            return Column(
              children: [
                Expanded(
                  child: SingleChildScrollView(
                    padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _buildOrderStatusCard(orderData),
                        SizedBox(height: 20),
                        _buildOrderInfoCard(orderData),
                        SizedBox(height: 20),
                        _buildChatSection(),
                      ],
                    ),
                  ),
                ),
                _buildMessageInput(),
              ],
            );
          },
        ),
      ),
    );
  }

  void _navigateToHomeScreen(BuildContext context) {
    Navigator.of(context).pushAndRemoveUntil(
      MaterialPageRoute(builder: (context) => HomeScreen()),
      (Route<dynamic> route) => false,
    );
  }

  Widget _buildOrderStatusCard(Map<String, dynamic> orderData) {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.teal.shade50,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(
            color: Colors.teal.withOpacity(0.1),
            spreadRadius: 2,
            blurRadius: 10,
            offset: Offset(0, 3),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Order #${widget.orderId}',
            style: GoogleFonts.poppins(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.teal.shade700,
            ),
          ),
          SizedBox(height: 15),
          _buildStatusIndicator(orderData['status'] ?? 'Unknown'),
        ],
      ),
    );
  }

  Widget _buildStatusIndicator(String status) {
    Color statusColor;
    IconData statusIcon;
    switch (status.toLowerCase()) {
      case 'pending':
        statusColor = Colors.orange;
        statusIcon = Icons.hourglass_empty;
        break;
      case 'preparing':
        statusColor = Colors.blue;
        statusIcon = Icons.restaurant;
        break;
      case 'on the way':
        statusColor = Colors.green;
        statusIcon = Icons.delivery_dining;
        break;
      case 'delivered':
        statusColor = Colors.teal;
        statusIcon = Icons.check_circle;
        break;
      default:
        statusColor = Colors.grey;
        statusIcon = Icons.help_outline;
    }

    return Row(
      children: [
        Container(
          padding: EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: statusColor.withOpacity(0.1),
            borderRadius: BorderRadius.circular(10),
          ),
          child: Icon(statusIcon, color: statusColor, size: 24),
        ),
        SizedBox(width: 15),
        Text(
          status,
          style: GoogleFonts.poppins(
            fontSize: 16,
            fontWeight: FontWeight.w600,
            color: statusColor,
          ),
        ),
      ],
    );
  }

  Widget _buildOrderInfoCard(Map<String, dynamic> orderData) {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            spreadRadius: 2,
            blurRadius: 10,
            offset: Offset(0, 3),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Order Details',
            style: GoogleFonts.poppins(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.black87,
            ),
          ),
          SizedBox(height: 15),
          _buildInfoRow(Icons.attach_money, 'Total Amount', '${orderData['total_amount'] ?? 'N/A'} MAD'),
          _buildInfoRow(Icons.location_on, 'Delivery Address', orderData['address'] ?? 'Not provided'),
          _buildInfoRow(Icons.access_time, 'Order Date', _formatTimestamp(orderData['created_at'])),
        ],
      ),
    );
  }

  Widget _buildInfoRow(IconData icon, String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 10),
      child: Row(
        children: [
          Container(
            padding: EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.teal.shade50,
              borderRadius: BorderRadius.circular(10),
            ),
            child: Icon(icon, color: Colors.teal, size: 20),
          ),
          SizedBox(width: 15),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: GoogleFonts.poppins(
                    fontSize: 14,
                    color: Colors.grey[600],
                  ),
                ),
                SizedBox(height: 4),
                Text(
                  value,
                  style: GoogleFonts.poppins(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildChatSection() {
    return Container(
      height: 300,
      decoration: BoxDecoration(
        color: Colors.grey.shade100,
        borderRadius: BorderRadius.circular(15),
      ),
      child: StreamBuilder<List<Map<String, dynamic>>>(
        stream: _chatService.getChatMessages(widget.orderId),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          }
          final messages = snapshot.data ?? [];
          return ListView.builder(
            controller: _scrollController,
            reverse: true,
            itemCount: messages.length,
            itemBuilder: (context, index) {
              final message = messages[index];
              return _buildMessageBubble(message);
            },
          );
        },
      ),
    );
  }

  Widget _buildMessageBubble(Map<String, dynamic> message) {
    final isUser = message['isUser'];
    return Align(
      alignment: isUser ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
        margin: EdgeInsets.symmetric(vertical: 4, horizontal: 16),
        decoration: BoxDecoration(
          color: isUser ? Colors.teal.shade200 : Colors.white,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              spreadRadius: 1,
              blurRadius: 5,
              offset: Offset(0, 1),
            ),
          ],
        ),
        child: Text(
          '${message['text']}',
          style: GoogleFonts.poppins(
            fontSize: 14,
            color: isUser ? Colors.white : Colors.black87,
          ),
        ),
      ),
    );
  }

  Widget _buildMessageInput() {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            spreadRadius: 1,
            blurRadius: 5,
            offset: Offset(0, -1),
          ),
        ],
      ),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: _messageController,
              decoration: InputDecoration(
                hintText: 'Type your message...',
                hintStyle: GoogleFonts.poppins(color: Colors.grey),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(25),
                  borderSide: BorderSide.none,
                ),
                filled: true,
                fillColor: Colors.grey.shade100,
                contentPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
              ),
            ),
          ),
          SizedBox(width: 10),
          Container(
            decoration: BoxDecoration(
              color: Colors.teal,
              shape: BoxShape.circle,
            ),
            child: IconButton(
              icon: Icon(Icons.send, color: Colors.white),
              onPressed: () {
                _sendMessage(widget.orderId);
              },
            ),
          ),
        ],
      ),
    );
  }

  String _formatTimestamp(Timestamp? timestamp) {
    if (timestamp == null) return 'Unknown';
    return timestamp.toDate().toString();
  }

  void _sendMessage(String orderId) {
    if (_messageController.text.isNotEmpty) {
      _chatService.sendMessage(orderId, _messageController.text);
      _messageController.clear();
      _scrollController.animateTo(
        0.0,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\points_history_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/auth_service.dart';
import '../services/firestore_service.dart';

class PointsHistoryScreen extends StatelessWidget {
  final FirestoreService _firestoreService = FirestoreService();

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);
    final userId = authService.currentUser?.uid;

    return Scaffold(
      appBar: AppBar(
        title: Text('Points History'),
      ),
      body: userId == null
          ? Center(child: Text('Please log in to view points history'))
          : FutureBuilder(
              future: Future.wait([
                _firestoreService.getUserPoints(userId),
                _firestoreService.getPointTransactions(userId),
              ]),
              builder: (context, AsyncSnapshot<List<dynamic>> snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                }
                if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));
                }
                if (!snapshot.hasData) {
                  return Center(child: Text('No points data found'));
                }

                int currentPoints = snapshot.data![0] as int;
                List<dynamic> transactions = snapshot.data![1];

                return Column(
                  children: [
                    Container(
                      padding: EdgeInsets.all(16),
                      color: Theme.of(context).primaryColor,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            'Current Points Balance:',
                            style: TextStyle(fontSize: 18, color: Colors.white),
                          ),
                          Text(
                            '$currentPoints',
                            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.white),
                          ),
                        ],
                      ),
                    ),
                    Expanded(
                      child: ListView.builder(
                        itemCount: transactions.length,
                        itemBuilder: (context, index) {
                          var transaction = transactions[index].data() as Map<String, dynamic>;
                          return ListTile(
                            leading: Icon(
                              transaction['type'] == 'earned' ? Icons.add_circle : Icons.remove_circle,
                              color: transaction['type'] == 'earned' ? Colors.green : Colors.red,
                            ),
                            title: Text('${transaction['points'].abs()} points ${transaction['type']}'),
                            subtitle: Text(transaction['timestamp'].toDate().toString()),
                            trailing: Text(
                              '${transaction['type'] == 'earned' ? '+' : '-'}${transaction['points'].abs()}',
                              style: TextStyle(
                                color: transaction['type'] == 'earned' ? Colors.green : Colors.red,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                  ],
                );
              },
            ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\product_details_screen.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:my_delivery_app/screens/add_review_screen.dart';
import 'package:provider/provider.dart';
import '../models/product.dart';
import '../models/review.dart';
import '../services/auth_service.dart';
import '../services/firestore_service.dart';
import '../services/review_service.dart';
import '../widgets/review_list_item.dart';

class ProductDetailsScreen extends StatefulWidget {
  final String productId;

  ProductDetailsScreen({required this.productId});

  @override
  _ProductDetailsScreenState createState() => _ProductDetailsScreenState();
}

class _ProductDetailsScreenState extends State<ProductDetailsScreen> {
  final FirestoreService _firestoreService = FirestoreService();
  final ReviewService _reviewService = ReviewService();

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);
    final userId = authService.currentUser?.uid;

    return Scaffold(
      appBar: AppBar(
        title: Text('Product Details'),
      ),
      body: FutureBuilder<DocumentSnapshot>(
        future: _firestoreService.getProductDetails(widget.productId),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          if (!snapshot.hasData || !snapshot.data!.exists) {
            return Center(child: Text('Product not found'));
          }

          var productData = snapshot.data!.data() as Map<String, dynamic>;
          return SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Image.network(productData['image_url'], height: 200, width: double.infinity, fit: BoxFit.cover),
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(productData['name'], style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
                      SizedBox(height: 8),
                      Text('${productData['price']} MAD', style: TextStyle(fontSize: 18, color: Colors.green)),
                      SizedBox(height: 8),
                      Row(
                        children: [
                          Icon(Icons.star, color: Colors.amber),
                          Text(
                            ' ${(productData['averageRating'] ?? 0).toStringAsFixed(1)} ',
                            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                          ),
                          Text(
                            '(${productData['numberOfReviews'] ?? 0} reviews)',
                            style: TextStyle(fontSize: 14, color: Colors.grey),
                          ),
                        ],
                      ),
                      SizedBox(height: 16),
                      Text(productData['description']),
                      SizedBox(height: 24),
                      Text('Reviews', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                      SizedBox(height: 8),
                      FutureBuilder<List<Review>>(
                        future: _reviewService.getProductReviews(widget.productId),
                        builder: (context, snapshot) {
                          if (snapshot.connectionState == ConnectionState.waiting) {
                            return Center(child: CircularProgressIndicator());
                          }
                          if (snapshot.hasError) {
                            return Center(child: Text('Error loading reviews'));
                          }
                          if (!snapshot.hasData || snapshot.data!.isEmpty) {
                            return Text('No reviews yet');
                          }
                          return Column(
                            children: snapshot.data!.map((review) => ReviewListItem(review: review)).toList(),
                          );
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
      floatingActionButton: userId != null
          ? FloatingActionButton(
              child: Icon(Icons.rate_review),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => AddReviewScreen(productId: widget.productId),
                  ),
                );
              },
            )
          : null,
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\profile_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';
import 'package:my_delivery_app/models/custom_user.dart';
import 'package:my_delivery_app/services/auth_service.dart';
import 'package:my_delivery_app/services/firestore_service.dart';
import 'package:my_delivery_app/services/order_service.dart';
import 'package:my_delivery_app/screens/order_tracking_screen.dart';

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
  static const Color accent = Color(0xFFFF8000);
}

class ProfileScreen extends StatefulWidget {
  @override
  _ProfileScreenState createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  final FirestoreService _firestoreService = FirestoreService();
  final OrderService _orderService = OrderService();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _addressController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadUserInfo();
  }

  Future<void> _loadUserInfo() async {
    final authService = Provider.of<AuthService>(context, listen: false);
    final user = authService.currentUser;
    if (user != null) {
      final userData = await _firestoreService.getUser(user.uid);
      setState(() {
        _nameController.text = userData['name'] ?? user.displayName ?? '';
        _phoneController.text = userData['phone'] ?? '';
        _addressController.text = userData['address'] ?? '';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);
    final user = authService.currentUser;

    return Scaffold(
      backgroundColor: DeliverooColors.background,
      body: user == null
          ? Center(child: CircularProgressIndicator())
          : CustomScrollView(
              slivers: [
                _buildSliverAppBar(_nameController.text),
                SliverToBoxAdapter(
                  child: Column(
                    children: [
                      _buildInfoSection(context, user),
                      _buildOrderSection(context, user),
                      _buildOptionsSection(context),
                      _buildLogoutButton(context, authService),
                    ],
                  ),
                ),
              ],
            ),
    );
  }

  Widget _buildSliverAppBar(String name) {
    return SliverAppBar(
      expandedHeight: 200.0,
      floating: false,
      pinned: true,
      flexibleSpace: FlexibleSpaceBar(
        title: Text(
          name,
          style: GoogleFonts.poppins(
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
        background: Stack(
          fit: StackFit.expand,
          children: [
            Image.network(
              'https://images.unsplash.com/photo-1504674900247-0877df9cc836',
              fit: BoxFit.cover,
            ),
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [Colors.transparent, Colors.black.withOpacity(0.7)],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoSection(BuildContext context, CustomUser user) {
    return Container(
      margin: EdgeInsets.all(16),
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 5,
            offset: Offset(0, 3),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Account Information',
            style: GoogleFonts.poppins(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: DeliverooColors.textDark,
            ),
          ),
          SizedBox(height: 16),
          _buildEditableInfoRow(Icons.person, 'Name', _nameController),
          SizedBox(height: 16),
          _buildInfoRow(Icons.email, user.email ?? 'No email'),
          SizedBox(height: 16),
          _buildEditableInfoRow(Icons.phone, 'Phone', _phoneController),
          SizedBox(height: 16),
          _buildEditableInfoRow(Icons.location_on, 'Address', _addressController),
          SizedBox(height: 24),
          Center(
            child: ElevatedButton(
              child: Text(
                'Update Profile',
                style: GoogleFonts.poppins(fontSize: 16, fontWeight: FontWeight.w600),
              ),
              onPressed: _updateUserInfo,
              style: ElevatedButton.styleFrom(
                foregroundColor: Colors.white,
                backgroundColor: DeliverooColors.primary,
                padding: EdgeInsets.symmetric(horizontal: 50, vertical: 15),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOrderSection(BuildContext context, CustomUser user) {
    return Container(
      margin: EdgeInsets.all(16),
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 5,
            offset: Offset(0, 3),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Recent Orders',
            style: GoogleFonts.poppins(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: DeliverooColors.textDark,
            ),
          ),
          SizedBox(height: 16),
          StreamBuilder<List<Map<String, dynamic>>>(
            stream: _orderService.getUserOrdersStream(user.uid),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(child: CircularProgressIndicator());
              }
              if (snapshot.hasError) {
                return Text('Error: ${snapshot.error}');
              }
              if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return Text('No orders found');
              }

              return Column(
                children: snapshot.data!.take(5).map((order) {
                  return ListTile(
                    title: Text('Order #${order['id']}'),
                    subtitle: Text('Status: ${order['status']}'),
                    trailing: Text('${order['total_amount'].toStringAsFixed(2)} MAD'),
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => OrderTrackingScreen(orderId: order['id']),
                        ),
                      );
                    },
                  );
                }).toList(),
              );
            },
          ),
          SizedBox(height: 16),
          Center(
            child: ElevatedButton(
              child: Text(
                'View All Orders',
                style: GoogleFonts.poppins(fontSize: 16, fontWeight: FontWeight.w600),
              ),
              onPressed: () {
                Navigator.pushNamed(context, '/order_history');
              },
              style: ElevatedButton.styleFrom(
                foregroundColor: DeliverooColors.primary,
                backgroundColor: Colors.white,
                padding: EdgeInsets.symmetric(horizontal: 50, vertical: 15),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                  side: BorderSide(color: DeliverooColors.primary),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOptionsSection(BuildContext context) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Options',
            style: GoogleFonts.poppins(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: DeliverooColors.textDark,
            ),
          ),
          SizedBox(height: 16),
          _buildOptionTile(context, Icons.star, 'My Points', '/points_history'),
          _buildOptionTile(context, Icons.favorite, 'Favorites', '/favorites'),
          _buildOptionTile(context, Icons.headset_mic, 'Customer Support', '/chat_list'),
        ],
      ),
    );
  }

  Widget _buildOptionTile(BuildContext context, IconData icon, String title, String route) {
    return Card(
      elevation: 0,
      color: Colors.white,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: ListTile(
        leading: Container(
          padding: EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: DeliverooColors.primary.withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(icon, color: DeliverooColors.primary),
        ),
        title: Text(
          title,
          style: GoogleFonts.poppins(fontSize: 16, fontWeight: FontWeight.w500),
        ),
        trailing: Icon(Icons.chevron_right, color: DeliverooColors.textLight),
        onTap: () => Navigator.pushNamed(context, route),
      ),
    );
  }

  Widget _buildLogoutButton(BuildContext context, AuthService authService) {
    return Container(
      margin: EdgeInsets.all(16),
      child: ElevatedButton(
        child: Text(
          'Logout',
          style: GoogleFonts.poppins(fontSize: 16, fontWeight: FontWeight.w600),
        ),
        style: ElevatedButton.styleFrom(
          foregroundColor: Colors.white,
          backgroundColor: DeliverooColors.accent,
          padding: EdgeInsets.symmetric(vertical: 16),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          minimumSize: Size(double.infinity, 50),
        ),
        onPressed: () async {
          await authService.signOut(context);
          Navigator.of(context).pushReplacementNamed('/login');
        },
      ),
    );
  }

  Widget _buildInfoRow(IconData icon, String text) {
    return Row(
      children: [
        Container(
          padding: EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: DeliverooColors.primary.withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(icon, color: DeliverooColors.primary),
        ),
        SizedBox(width: 16),
        Expanded(
          child: Text(
            text,
            style: GoogleFonts.poppins(fontSize: 16),
          ),
        ),
      ],
    );
  }

  Widget _buildEditableInfoRow(IconData icon, String label, TextEditingController controller) {
    return Row(
      children: [
        Container(
          padding: EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: DeliverooColors.primary.withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(icon, color: DeliverooColors.primary),
        ),
        SizedBox(width: 16),
        Expanded(
          child: TextFormField(
            controller: controller,
            decoration: InputDecoration(
              labelText: label,
            ),
          ),
        ),
      ],
    );
  }

  Future<void> _updateUserInfo() async {
    final authService = Provider.of<AuthService>(context, listen: false);
    final user = authService.currentUser;
    if (user != null) {
      try {
        await _firestoreService.updateUserInfo(
          user.uid,
          _nameController.text,
          _phoneController.text,
          _addressController.text,
        );
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Profile updated successfully')),
        );
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error updating profile: $e')),
        );
      }
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _phoneController.dispose();
    _addressController.dispose();
    super.dispose();
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\register_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:google_fonts/google_fonts.dart';
import '../services/auth_service.dart';
import '../services/firestore_service.dart';
import '../models/custom_user.dart';

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
}

class RegisterScreen extends StatefulWidget {
  @override
  _RegisterScreenState createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  String _email = '';
  String _password = '';
  String _name = '';
  String _phone = '';
  bool _isPasswordVisible = false;
  bool _isLoading = false;

  final FirestoreService _firestoreService = FirestoreService();

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);

    return Scaffold(
      backgroundColor: DeliverooColors.background,
      body: SafeArea(
        child: SingleChildScrollView(
          child: Padding(
            padding: EdgeInsets.symmetric(horizontal: 24.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                SizedBox(height: 40),
                Text(
                  'FoodDash',
                  style: GoogleFonts.poppins(
                    textStyle: TextStyle(
                      color: DeliverooColors.primary,
                      fontWeight: FontWeight.bold,
                      fontSize: 36,
                    ),
                  ),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 24),
                Text(
                  'Create Account',
                  style: GoogleFonts.poppins(
                    textStyle: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.w600,
                      color: DeliverooColors.textDark,
                    ),
                  ),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 32),
                Form(
                  key: _formKey,
                  child: Column(
                    children: [
                      _buildTextField(
                        icon: Icons.person,
                        hintText: 'Name',
                        onSaved: (value) => _name = value!,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter your name';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: 16),
                      _buildTextField(
                        icon: Icons.email,
                        hintText: 'Email',
                        onSaved: (value) => _email = value!,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter your email';
                          }
                          // You can add more sophisticated email validation here
                          return null;
                        },
                      ),
                      SizedBox(height: 16),
                      _buildTextField(
                        icon: Icons.phone,
                        hintText: 'Phone',
                        onSaved: (value) => _phone = value!,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter your phone number';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: 16),
                      _buildTextField(
                        icon: Icons.lock,
                        hintText: 'Password',
                        obscureText: !_isPasswordVisible,
                        onSaved: (value) => _password = value!,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter a password';
                          }
                          if (value.length < 6) {
                            return 'Password must be at least 6 characters long';
                          }
                          return null;
                        },
                        suffixIcon: IconButton(
                          icon: Icon(
                            _isPasswordVisible ? Icons.visibility : Icons.visibility_off,
                            color: DeliverooColors.textLight,
                          ),
                          onPressed: () {
                            setState(() {
                              _isPasswordVisible = !_isPasswordVisible;
                            });
                          },
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 24),
                ElevatedButton(
                  child: Padding(
                    padding: EdgeInsets.symmetric(vertical: 16.0),
                    child: _isLoading
                        ? CircularProgressIndicator(color: Colors.white)
                        : Text(
                            'Register',
                            style: GoogleFonts.poppins(
                              textStyle: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
                            ),
                          ),
                  ),
                  style: ElevatedButton.styleFrom(
                    foregroundColor: Colors.white,
                    backgroundColor: DeliverooColors.primary,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                    elevation: 0,
                  ),
                  onPressed: _isLoading ? null : () async {
                    if (_formKey.currentState!.validate()) {
                      setState(() {
                        _isLoading = true;
                      });
                      _formKey.currentState!.save();
                      try {
                        final CustomUser? user = await authService.registerWithEmailAndPassword(
                          _email,
                          _password,
                          _name,
                          _phone
                        );
                        if (user != null) {
                          Navigator.of(context).pushReplacementNamed('/home');
                        }
                      } catch (e) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('Failed to register: ${e.toString()}'),
                            backgroundColor: Colors.red,
                          ),
                        );
                      } finally {
                        setState(() {
                          _isLoading = false;
                        });
                      }
                    }
                  },
                ),
                SizedBox(height: 16),
                TextButton(
                  child: Text(
                    'Already have an account? Login',
                    style: GoogleFonts.poppins(
                      textStyle: TextStyle(color: DeliverooColors.primary, fontWeight: FontWeight.w500),
                    ),
                  ),
                  onPressed: () {
                    Navigator.of(context).pushReplacementNamed('/login');
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required IconData icon,
    required String hintText,
    required Function(String?) onSaved,
    required String? Function(String?) validator,
    bool obscureText = false,
    Widget? suffixIcon,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: DeliverooColors.textLight.withOpacity(0.5)),
      ),
      child: TextFormField(
        decoration: InputDecoration(
          prefixIcon: Icon(icon, color: DeliverooColors.primary),
          hintText: hintText,
          hintStyle: GoogleFonts.poppins(textStyle: TextStyle(color: DeliverooColors.textLight)),
          border: InputBorder.none,
          contentPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 16),
          suffixIcon: suffixIcon,
        ),
        style: GoogleFonts.poppins(textStyle: TextStyle(color: DeliverooColors.textDark)),
        obscureText: obscureText,
        validator: validator,
        onSaved: onSaved,
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\review_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/auth_service.dart';
import '../services/firestore_service.dart';

class ReviewScreen extends StatefulWidget {
  final String productId;
  final String productName;

  ReviewScreen({required this.productId, required this.productName});

  @override
  _ReviewScreenState createState() => _ReviewScreenState();
}

class _ReviewScreenState extends State<ReviewScreen> {
  final _formKey = GlobalKey<FormState>();
  double _rating = 0;
  String _comment = '';
  final FirestoreService _firestoreService = FirestoreService();

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);

    return Scaffold(
      appBar: AppBar(
        title: Text('Review ${widget.productName}'),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('Rate this product:', style: TextStyle(fontSize: 18)),
              SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: List.generate(5, (index) {
                  return IconButton(
                    icon: Icon(
                      index < _rating ? Icons.star : Icons.star_border,
                      color: Colors.amber,
                      size: 40,
                    ),
                    onPressed: () {
                      setState(() {
                        _rating = index + 1;
                      });
                    },
                  );
                }),
              ),
              SizedBox(height: 20),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Your Review',
                  border: OutlineInputBorder(),
                ),
                maxLines: 5,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter your review';
                  }
                  return null;
                },
                onSaved: (value) {
                  _comment = value!;
                },
              ),
              SizedBox(height: 20),
              Center(
                child: ElevatedButton(
                  child: Text('Submit Review'),
                  onPressed: () async {
                    if (_formKey.currentState!.validate() && _rating > 0) {
                      _formKey.currentState!.save();
                      try {
                        await _firestoreService.addReview(
                          widget.productId,
                          authService.currentUser!.uid,
                          _rating,
                          _comment,
                        );
                        Navigator.of(context).pop();
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('Review submitted successfully')),
                        );
                      } catch (e) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('Failed to submit review: ${e.toString()}')),
                        );
                      }
                    } else if (_rating == 0) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text('Please select a rating')),
                      );
                    }
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\search_carrefour_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:shimmer/shimmer.dart';
import 'package:provider/provider.dart';
import '../services/carrefour_service.dart';
import '../services/cart_service.dart';
import '../models/product.dart';
import '../models/category.dart';
import 'package:badges/badges.dart' as badges;
import 'cart_screen.dart';

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
  static const Color accent = Color(0xFFFF8000);
}

class SearchCarrefourScreen extends StatefulWidget {
  final String location;

  const SearchCarrefourScreen({Key? key, required this.location}) : super(key: key);

  @override
  _SearchCarrefourScreenState createState() => _SearchCarrefourScreenState();
}

class _SearchCarrefourScreenState extends State<SearchCarrefourScreen> {
  final CarrefourService _carrefourService = CarrefourService();
  final ScrollController _scrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  List<Product> _allProducts = [];
  List<Product> _filteredProducts = [];
  bool _isLoading = true;
  bool _isLoadingMore = false;
  List<Category> _categories = [];
  int _currentCategoryIndex = 0;

  @override
  void initState() {
    super.initState();
    _loadCategories();
    _scrollController.addListener(_onScroll);
  }

  @override
  void dispose() {
    _scrollController.removeListener(_onScroll);
    _scrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  void _onScroll() {
    if (_scrollController.position.pixels == _scrollController.position.maxScrollExtent) {
      _loadMoreProducts();
    }
  }

  Future<void> _loadCategories() async {
    try {
      final categories = await _carrefourService.getCarrefourCategories(widget.location);
      setState(() {
        _categories = categories;
      });
      _loadProductsFromCategory();
    } catch (e) {
      print('Error loading categories: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _loadProductsFromCategory() async {
    if (_currentCategoryIndex >= _categories.length) {
      setState(() {
        _isLoading = false;
        _isLoadingMore = false;
      });
      return;
    }

    try {
      final categoryProducts = await _carrefourService.getCategoryProducts(_categories[_currentCategoryIndex].url);
      setState(() {
        _allProducts.addAll(categoryProducts);
        _filteredProducts = _allProducts;
        _isLoading = false;
        _currentCategoryIndex++;
      });
    } catch (e) {
      print('Error loading products: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _loadMoreProducts() async {
    if (!_isLoadingMore) {
      setState(() {
        _isLoadingMore = true;
      });
      await _loadProductsFromCategory();
      setState(() {
        _isLoadingMore = false;
      });
    }
  }

  void _performSearch(String query) {
    setState(() {
      _searchQuery = query;
      _filteredProducts = _allProducts.where((product) =>
          product.name.toLowerCase().contains(query.toLowerCase())).toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: DeliverooColors.background,
      body: CustomScrollView(
        controller: _scrollController,
        slivers: [
          _buildSliverAppBar(),
          SliverToBoxAdapter(child: _buildSearchBox()),
          SliverPadding(
            padding: const EdgeInsets.all(8.0),
            sliver: _isLoading
                ? SliverToBoxAdapter(child: _buildCategoryShimmerEffect())
                : SliverGrid(
                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      childAspectRatio: 0.7,
                      crossAxisSpacing: 10,
                      mainAxisSpacing: 10,
                    ),
                    delegate: SliverChildBuilderDelegate(
                      (context, index) {
                        if (index < _filteredProducts.length) {
                          return _buildProductCard(_filteredProducts[index]);
                        } else if (_isLoadingMore) {
                          return _buildProductShimmer();
                        } else {
                          return SizedBox.shrink();
                        }
                      },
                      childCount: _filteredProducts.length + (_isLoadingMore ? 2 : 0),
                    ),
                  ),
          ),
        ],
      ),
    );
  }

  Widget _buildSliverAppBar() {
    return SliverAppBar(
      floating: true,
      snap: true,
      elevation: 2,
      backgroundColor: DeliverooColors.primary,
      iconTheme: IconThemeData(color: Colors.white), // This sets the back arrow color to white
      title: Text(
        'Search Carrefour',
        style: GoogleFonts.poppins(
          textStyle: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 24),
        ),
      ),
      actions: [
        Consumer<CartService>(
          builder: (context, cart, child) {
            return Padding(
              padding: const EdgeInsets.only(right: 16.0),
              child: badges.Badge(
                position: badges.BadgePosition.topEnd(top: 0, end: 3),
                badgeAnimation: badges.BadgeAnimation.rotation(
                  animationDuration: Duration(seconds: 1),
                  colorChangeAnimationDuration: Duration(seconds: 1),
                  loopAnimation: false,
                  curve: Curves.fastOutSlowIn,
                  colorChangeAnimationCurve: Curves.easeInCubic,
                ),
                badgeStyle: badges.BadgeStyle(
                  shape: badges.BadgeShape.circle,
                  badgeColor: DeliverooColors.accent,
                  padding: EdgeInsets.all(5),
                  borderRadius: BorderRadius.circular(4),
                  borderSide: BorderSide.none,
                  elevation: 0,
                ),
                badgeContent: Text(
                  '${cart.itemCount}',
                  style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                ),
                child: IconButton(
                  icon: Icon(Icons.shopping_basket, color: Colors.white),
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => CartScreen()),
                    );
                  },
                ),
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildSearchBox() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: DeliverooColors.primary,
              offset: Offset(0, 4),
              blurRadius: 0,
            ),
          ],
        ),
        child: TextField(
          controller: _searchController,
          onChanged: _performSearch,
          decoration: InputDecoration(
            hintText: 'Search Carrefour products',
            prefixIcon: Icon(Icons.search, color: DeliverooColors.primary),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: DeliverooColors.primary, width: 2),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: DeliverooColors.primary, width: 2),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: DeliverooColors.primary, width: 2),
            ),
            filled: true,
            fillColor: Colors.white,
          ),
          style: GoogleFonts.poppins(
            fontSize: 14,
            fontWeight: FontWeight.bold,
            color: DeliverooColors.textDark,
          ),
        ),
      ),
    );
  }

    Widget _buildProductCard(Product product) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Stack(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                child: Image.network(
                  product.imageUrl,
                  width: double.infinity,
                  height: 90,
                  fit: BoxFit.cover,
                ),
              ),
              Positioned(
                top: 8,
                right: 8,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: DeliverooColors.primary.withOpacity(0.9),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '${product.price.toStringAsFixed(2)} MAD',
                    style: GoogleFonts.poppins(
                      fontSize: 15,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
            ],
          ),
          Expanded(
            child: Padding(
              padding: EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    product.name,
                    style: GoogleFonts.poppins(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: DeliverooColors.textDark,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  Row(
                    children: [
                      Icon(Icons.star, color: DeliverooColors.accent, size: 14),
                      SizedBox(width: 4),
                        Text(
                        product.averageRating.toStringAsFixed(1),
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                          color: DeliverooColors.textLight,
                        ),
                      ),
                      SizedBox(width: 8),
                      Text(
                        '(${product.numberOfRatings})',
                        style: GoogleFonts.poppins(
                          fontSize: 12,
                          color: DeliverooColors.textLight,
                        ),
                      ),

                    ],
                  ),
                  SizedBox(height: 8),
                  SizedBox(
                    width: double.infinity,
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: DeliverooColors.primary,
                            offset: Offset(0, 4),
                            blurRadius: 0,
                          ),
                        ],
                      ),
                      child: OutlinedButton.icon(
                        onPressed: () {
                         Provider.of<CartService>(context, listen: false)
    .addItem(product.id, product.name, product.price, product.imageUrl, product.sellerType); // Pass sellerType
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text(
                                'Added to cart',
                                style: GoogleFonts.poppins(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w500,
                                  color: Colors.white,
                                ),
                              ),
                              backgroundColor: DeliverooColors.primary,
                              behavior: SnackBarBehavior.floating,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                            ),
                          );
                        },
                        icon: Icon(Icons.add_shopping_cart, size: 16),
                        label: Text('Add to Cart', style: TextStyle(fontSize: 12, fontWeight: FontWeight.bold)),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: DeliverooColors.primary,
                          side: BorderSide(color: DeliverooColors.primary, width: 2),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          padding: EdgeInsets.symmetric(vertical: 8),
                          backgroundColor: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }


  Widget _buildCategoryShimmerEffect() {
    return Shimmer.fromColors(
      baseColor: Colors.grey[300]!,
      highlightColor: Colors.grey[100]!,
      child: Column(
        children: [
          GridView.builder(
            shrinkWrap: true,
            physics: NeverScrollableScrollPhysics(),
            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              childAspectRatio: 0.7,
              crossAxisSpacing: 10,
              mainAxisSpacing: 10,
            ),
            itemCount: 6,
            itemBuilder: (context, index) => _buildProductShimmer(),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchBoxShimmer() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Container(
        height: 48,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

  Widget _buildProductShimmer() {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Colors.white,
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            width: double.infinity,
            height: 120,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
            ),
          ),
          Expanded(
            child: Padding(
              padding: EdgeInsets.all(8),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Container(
                    width: double.infinity,
                    height: 16,
                    color: Colors.white,
                  ),
                  SizedBox(height: 8),
                  Container(
                    width: 100,
                    height: 16,
                    color: Colors.white,
                  ),
                  SizedBox(height: 8),
                  Container(
                    width: double.infinity,
                    height: 32,
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\search_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:my_delivery_app/screens/cart_screen.dart';
import 'package:shimmer/shimmer.dart';
import 'package:provider/provider.dart';
import '../services/marjane_service.dart';
import '../services/cart_service.dart';
import '../models/product.dart';
import '../models/category.dart';
import 'package:badges/badges.dart' as badges;

class DeliverooColors {
  static const Color primary = Color(0xFF00CCBC);
  static const Color secondary = Color(0xFF2E3333);
  static const Color background = Color(0xFFF9FAFA);
  static const Color textDark = Color(0xFF2E3333);
  static const Color textLight = Color(0xFF585C5C);
  static const Color accent = Color(0xFFFF8000);
}

class SearchScreen extends StatefulWidget {
  @override
  _SearchScreenState createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> {
  final MarjaneService _marjaneService = MarjaneService();
  final ScrollController _scrollController = ScrollController();
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  List<Product> _allProducts = [];
  List<Product> _filteredProducts = [];
  bool _isLoading = true;
  bool _isLoadingMore = false;
  List<Category> _categories = [];
  int _currentCategoryIndex = 0;

  @override
  void initState() {
    super.initState();
    _loadCategories();
    _scrollController.addListener(_onScroll);
  }

  @override
  void dispose() {
    _scrollController.removeListener(_onScroll);
    _scrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  void _onScroll() {
    if (_scrollController.position.pixels == _scrollController.position.maxScrollExtent) {
      _loadMoreProducts();
    }
  }

  Future<void> _loadCategories() async {
    try {
      final categories = await _marjaneService.getMarjaneCategories('casablanca');
      setState(() {
        _categories = categories;
      });
      _loadProductsFromCategory();
    } catch (e) {
      print('Error loading categories: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _loadProductsFromCategory() async {
    if (_currentCategoryIndex >= _categories.length) {
      setState(() {
        _isLoading = false;
        _isLoadingMore = false;
      });
      return;
    }

    try {
      final categoryProducts = await _marjaneService.getCategoryProducts(_categories[_currentCategoryIndex].url);
      setState(() {
        _allProducts.addAll(categoryProducts);
        _filteredProducts = _allProducts;
        _isLoading = false;
        _currentCategoryIndex++;
      });
    } catch (e) {
      print('Error loading products: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _loadMoreProducts() async {
    if (!_isLoadingMore) {
      setState(() {
        _isLoadingMore = true;
      });
      await _loadProductsFromCategory();
      setState(() {
        _isLoadingMore = false;
      });
    }
  }

  void _performSearch(String query) {
    setState(() {
      _searchQuery = query;
      _filteredProducts = _allProducts.where((product) =>
          product.name.toLowerCase().contains(query.toLowerCase())).toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: DeliverooColors.background,
      body: CustomScrollView(
        controller: _scrollController,
        slivers: [
          _buildSliverAppBar(),
          SliverToBoxAdapter(child: _buildSearchBox()),
          SliverPadding(
            padding: const EdgeInsets.all(8.0),
            sliver: _isLoading
                ? SliverToBoxAdapter(child: _buildCategoryShimmerEffect())
                : SliverGrid(
                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      childAspectRatio: 0.7,
                      crossAxisSpacing: 10,
                      mainAxisSpacing: 10,
                    ),
                    delegate: SliverChildBuilderDelegate(
                      (context, index) {
                        if (index < _filteredProducts.length) {
                          return _buildProductCard(_filteredProducts[index]);
                        } else if (_isLoadingMore) {
                          return _buildProductShimmer();
                        } else {
                          return SizedBox.shrink();
                        }
                      },
                      childCount: _filteredProducts.length + (_isLoadingMore ? 2 : 0),
                    ),
                  ),
          ),
        ],
      ),
    );
  }

Widget _buildSliverAppBar() {
  return SliverAppBar(
    floating: true,
    snap: true,
    elevation: 2,
    backgroundColor: DeliverooColors.primary,
    iconTheme: IconThemeData(color: Colors.white), // This sets the back arrow color to white
    title: Text(
      'Search Marjane',
      style: GoogleFonts.poppins(
        textStyle: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 24),
      ),
    ),
    actions: [
      Consumer<CartService>(
        builder: (context, cart, child) {
          return Padding(
            padding: const EdgeInsets.only(right: 16.0),
            child: badges.Badge(
              position: badges.BadgePosition.topEnd(top: 0, end: 3),
              badgeAnimation: badges.BadgeAnimation.rotation(
                animationDuration: Duration(seconds: 1),
                colorChangeAnimationDuration: Duration(seconds: 1),
                loopAnimation: false,
                curve: Curves.fastOutSlowIn,
                colorChangeAnimationCurve: Curves.easeInCubic,
              ),
              badgeStyle: badges.BadgeStyle(
                shape: badges.BadgeShape.circle,
                badgeColor: DeliverooColors.accent,
                padding: EdgeInsets.all(5),
                borderRadius: BorderRadius.circular(4),
                borderSide: BorderSide.none,
                elevation: 0,
              ),
              badgeContent: Text(
                '${cart.itemCount}',
                style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
              ),
              child: IconButton(
                icon: Icon(Icons.shopping_basket, color: Colors.white),
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => CartScreen()),
                  );
                },
              ),
            ),
          );
        },
      ),
    ],
  );
}

  Widget _buildSearchBox() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: DeliverooColors.primary,
              offset: Offset(0, 4),
              blurRadius: 0,
            ),
          ],
        ),
        child: TextField(
          controller: _searchController,
          onChanged: _performSearch,
          decoration: InputDecoration(
            hintText: 'Search products',
            prefixIcon: Icon(Icons.search, color: DeliverooColors.primary),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: DeliverooColors.primary, width: 2),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: DeliverooColors.primary, width: 2),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: DeliverooColors.primary, width: 2),
            ),
            filled: true,
            fillColor: Colors.white,
          ),
          style: GoogleFonts.poppins(
            fontSize: 14,
            fontWeight: FontWeight.bold,
            color: DeliverooColors.textDark,
          ),
        ),
      ),
    );
  }

  Widget _buildProductCard(Product product) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Stack(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                child: Image.network(
                  product.imageUrl,
                  width: double.infinity,
                  height: 90,
                  fit: BoxFit.cover,
                ),
              ),
              Positioned(
                top: 8,
                right: 8,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: DeliverooColors.primary.withOpacity(0.9),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '${product.price.toStringAsFixed(2)} MAD',
                    style: GoogleFonts.poppins(
                      fontSize: 15,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
            ],
          ),
          Expanded(
            child: Padding(
              padding: EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    product.name,
                    style: GoogleFonts.poppins(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: DeliverooColors.textDark,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  Row(
                    children: [
                      Icon(Icons.star, color: DeliverooColors.accent, size: 14),
                      SizedBox(width: 4),
                                            Text(
                        product.averageRating.toStringAsFixed(1),
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                          color: DeliverooColors.textLight,
                        ),
                      ),
                      SizedBox(width: 8),
                      Text(
                        '(${product.numberOfRatings})',
                        style: GoogleFonts.poppins(
                          fontSize: 12,
                          color: DeliverooColors.textLight,
                        ),
                      ),

                    ],
                  ),
                  SizedBox(height: 8),
                  SizedBox(
                    width: double.infinity,
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: DeliverooColors.primary,
                            offset: Offset(0, 4),
                            blurRadius: 0,
                          ),
                        ],
                      ),
                      child: OutlinedButton.icon(
                        onPressed: () {
                          Provider.of<CartService>(context, listen: false)
    .addItem(product.id, product.name, product.price, product.imageUrl, product.sellerType); // Pass sellerType
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text(
                                'Added to cart',
                                style: GoogleFonts.poppins(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w500,
                                  color: Colors.white,
                                ),
                              ),
                              backgroundColor: DeliverooColors.primary,
                              behavior: SnackBarBehavior.floating,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                            ),
                          );
                        },
                        icon: Icon(Icons.add_shopping_cart, size: 16),
                        label: Text('Add to Cart', style: TextStyle(fontSize: 12, fontWeight: FontWeight.bold)),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: DeliverooColors.primary,
                          side: BorderSide(color: DeliverooColors.primary, width: 2),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          padding: EdgeInsets.symmetric(vertical: 8),
                          backgroundColor: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCategoryShimmerEffect() {
    return Shimmer.fromColors(
      baseColor: Colors.grey[300]!,
      highlightColor: Colors.grey[100]!,
      child: Column(
        children: [
          GridView.builder(
            shrinkWrap: true,
            physics: NeverScrollableScrollPhysics(),
            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              childAspectRatio: 0.7,
              crossAxisSpacing: 10,
              mainAxisSpacing: 10,
            ),
            itemCount: 6,
            itemBuilder: (context, index) => _buildProductShimmer(),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchBoxShimmer() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Container(
        height: 48,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

Widget _buildProductShimmer() {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Colors.white,
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            width: double.infinity,
            height: 90,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
            ),
          ),
          Expanded(
            child: Padding(
              padding: EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Container(
                    width: double.infinity,
                    height: 16,
                    color: Colors.white,
                  ),
                  SizedBox(height: 8),
                  Container(
                    width: 100,
                    height: 16,
                    color: Colors.white,
                  ),
                  SizedBox(height: 8),
                  Container(
                    width: double.infinity,
                    height: 40,
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\shops_screen.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/firestore_service.dart';

class ShopsScreen extends StatelessWidget {
  final FirestoreService _firestoreService = FirestoreService();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shops'),
      ),
      body: FutureBuilder<List<QueryDocumentSnapshot>>(
        future: _firestoreService.getShops(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(child: Text('No shops found'));
          }

          return ListView.builder(
            itemCount: snapshot.data!.length,
            itemBuilder: (ctx, index) {
              var shop = snapshot.data![index];
              return Card(
                child: ListTile(
                  leading: Image.network(
                    shop['logo'],
                    width: 50,
                    height: 50,
                  ),
                  title: Text(shop['name']),
                  subtitle: Text(shop['type']),
                  onTap: () {
                    // TODO: Navigate to shop product listing
                    print('Tapped on ${shop['name']}');
                  },
                ),
              );
            },
          );
        },
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\supermarket_screen.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/firestore_service.dart';

class SupermarketScreen extends StatelessWidget {
  final FirestoreService _firestoreService = FirestoreService();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Supermarkets'),
      ),
      body: FutureBuilder<List<QueryDocumentSnapshot>>(
        future: _firestoreService.getSupermarkets(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(child: Text('No supermarkets found'));
          }

          return ListView.builder(
            itemCount: snapshot.data!.length,
            itemBuilder: (ctx, index) {
              var supermarket = snapshot.data![index];
              return Card(
                child: ListTile(
                  leading: Image.network(
                    supermarket['logo'],
                    width: 50,
                    height: 50,
                  ),
                  title: Text(supermarket['name']),
                  onTap: () {
                    // TODO: Navigate to supermarket product listing
                    print('Tapped on ${supermarket['name']}');
                  },
                ),
              );
            },
          );
        },
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\traditional_market_screen.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:my_delivery_app/services/traditional_market_service.dart';
import 'package:my_delivery_app/screens/cart_screen.dart';
import 'package:my_delivery_app/services/cart_service.dart';
import 'package:provider/provider.dart';
import 'package:shimmer/shimmer.dart';
import 'package:badges/badges.dart' as badges;

class TraditionalMarketColors {
  static const Color primary = Color(0xFFB75D69);
  static const Color secondary = Color(0xFFEBAA62);
  static const Color background = Color(0xFFFAE8D7);
  static const Color textDark = Color(0xFF4A3034);
  static const Color textLight = Color(0xFF8E5D52);
  static const Color accent = Color(0xFFE06C78);
  static const Color neutral = Color(0xFFD2A979);
}

class TraditionalMarketScreen extends StatefulWidget {
  final String location;

  const TraditionalMarketScreen({Key? key, required this.location}) : super(key: key);

  @override
  _TraditionalMarketScreenState createState() => _TraditionalMarketScreenState();
}

class _TraditionalMarketScreenState extends State<TraditionalMarketScreen> {
  final TraditionalMarketService _marketService = TraditionalMarketService();
  final TextEditingController _searchController = TextEditingController();
  String? _selectedCategoryId;
  String _searchQuery = '';

  @override
  void initState() {
    super.initState();
    _initializeFirstCategory();
  }

  void _initializeFirstCategory() async {
    final categories = await _marketService.getCategories().first;
    if (categories.docs.isNotEmpty) {
      setState(() {
        _selectedCategoryId = categories.docs.first.id;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: TraditionalMarketColors.background,
      body: CustomScrollView(
        slivers: [
          _buildSliverAppBar(),
          SliverToBoxAdapter(
            child: _buildSearchBox(),
          ),
          SliverToBoxAdapter(
            child: _buildCategoryList(),
          ),
          _buildProductList(),
        ],
      ),
    );
  }

  Widget _buildSliverAppBar() {
    return SliverAppBar(
      floating: true,
      snap: true,
      elevation: 0,
      backgroundColor: TraditionalMarketColors.primary,
      iconTheme: IconThemeData(color: TraditionalMarketColors.background),
      title: Text(
        'Traditional Market',
        style: GoogleFonts.poppins(
          textStyle: TextStyle(color: TraditionalMarketColors.background, fontWeight: FontWeight.bold, fontSize: 24),
        ),
      ),
      actions: [
        Consumer<CartService>(
          builder: (context, cart, child) {
            return Padding(
              padding: const EdgeInsets.only(right: 16.0),
              child: badges.Badge(
                position: badges.BadgePosition.topEnd(top: 0, end: 3),
                badgeAnimation: badges.BadgeAnimation.rotation(
                  animationDuration: Duration(seconds: 1),
                  colorChangeAnimationDuration: Duration(seconds: 1),
                  loopAnimation: false,
                  curve: Curves.fastOutSlowIn,
                  colorChangeAnimationCurve: Curves.easeInCubic,
                ),
                badgeStyle: badges.BadgeStyle(
                  shape: badges.BadgeShape.circle,
                  badgeColor: TraditionalMarketColors.accent,
                  padding: EdgeInsets.all(5),
                  borderRadius: BorderRadius.circular(4),
                  borderSide: BorderSide.none,
                  elevation: 0,
                ),
                badgeContent: Text(
                  '${cart.itemCount}',
                  style: TextStyle(color: TraditionalMarketColors.background, fontWeight: FontWeight.bold),
                ),
                child: IconButton(
                  icon: Icon(Icons.shopping_basket, color: TraditionalMarketColors.background),
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => CartScreen()),
                    );
                  },
                ),
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildSearchBox() {
    return Container(
      margin: EdgeInsets.all(16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: TraditionalMarketColors.primary,
            offset: Offset(0, 3),
            blurRadius: 0,
          ),
        ],
      ),
      child: SizedBox(
        width: double.infinity,
        child: OutlinedButton.icon(
          onPressed: () {
            // TODO: Implement search functionality
          },
          icon: Icon(Icons.search, size: 18, color: const Color.fromARGB(255, 60, 60, 60)),
          label: Text(
            'Search in Traditional Market',
            style: GoogleFonts.poppins(
              textStyle: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: TraditionalMarketColors.primary),
            ),
          ),
          style: OutlinedButton.styleFrom(
            foregroundColor: TraditionalMarketColors.primary,
            side: BorderSide(color: TraditionalMarketColors.primary, width: 2),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
            padding: EdgeInsets.symmetric(vertical: 16),
            backgroundColor: Colors.white,
          ),
        ),
      ),
    );
  }

  Widget _buildCategoryList() {
    return StreamBuilder<QuerySnapshot>(
      stream: _marketService.getCategories(),
      builder: (context, snapshot) {
        if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        }

        if (snapshot.connectionState == ConnectionState.waiting) {
          return _buildCategoryShimmerEffect();
        }

        return Container(
          height: 50,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: snapshot.data!.docs.length,
            itemBuilder: (context, index) {
              DocumentSnapshot document = snapshot.data!.docs[index];
              Map<String, dynamic> data = document.data() as Map<String, dynamic>;
              return Padding(
                padding: const EdgeInsets.symmetric(horizontal: 4.0),
                child: ChoiceChip(
                  label: Text(
                    data['name'],
                    style: GoogleFonts.poppins(
                      fontSize: 14,
                      fontWeight: FontWeight.w500,
                      color: _selectedCategoryId == document.id ? TraditionalMarketColors.background : TraditionalMarketColors.textDark,
                    ),
                  ),
                  selected: _selectedCategoryId == document.id,
                  selectedColor: TraditionalMarketColors.primary,
                  backgroundColor: TraditionalMarketColors.neutral,
                  onSelected: (selected) {
                    setState(() {
                      _selectedCategoryId = selected ? document.id : null;
                    });
                  },
                ),
              );
            },
          ),
        );
      },
    );
  }

  Widget _buildProductList() {
    if (_selectedCategoryId == null) {
      return SliverToBoxAdapter(
        child: Center(
          child: Text(
            'Select a category to view products',
            style: GoogleFonts.poppins(
              fontSize: 16,
              color: TraditionalMarketColors.textLight,
            ),
          ),
        ),
      );
    }

    return StreamBuilder<QuerySnapshot>(
      stream: _marketService.getProductsByCategory(_selectedCategoryId!),
      builder: (context, snapshot) {
        if (snapshot.hasError) {
          return SliverToBoxAdapter(child: Text('Error: ${snapshot.error}'));
        }

        if (snapshot.connectionState == ConnectionState.waiting) {
          return SliverToBoxAdapter(child: _buildProductShimmerEffect());
        }

        final filteredProducts = snapshot.data!.docs.where((doc) {
          final data = doc.data() as Map<String, dynamic>;
          return data['name'].toString().toLowerCase().contains(_searchQuery.toLowerCase());
        }).toList();

        return SliverGrid(
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            childAspectRatio: 0.75,
            crossAxisSpacing: 10,
            mainAxisSpacing: 10,
          ),
          delegate: SliverChildBuilderDelegate(
            (context, index) => _buildProductCard(filteredProducts[index]),
            childCount: filteredProducts.length,
          ),
        );
      },
    );
  }

  Widget _buildProductCard(DocumentSnapshot document) {
    Map<String, dynamic> data = document.data() as Map<String, dynamic>;

    return Container(
      margin: EdgeInsets.all(8),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: TraditionalMarketColors.primary.withOpacity(0.1),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            child: Stack(
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                  child: Image.network(
                    data['imageUrl'] ?? 'https://via.placeholder.com/150',
                    width: double.infinity,
                    fit: BoxFit.cover,
                  ),
                ),
                Positioned(
                  top: 8,
                  right: 8,
                  child: Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: TraditionalMarketColors.secondary.withOpacity(0.9),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      '${data['price'].toStringAsFixed(2)} MAD',
                      style: GoogleFonts.poppins(
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                        color: TraditionalMarketColors.textDark,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
          Padding(
            padding: EdgeInsets.all(12),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  data['name'],
                  style: GoogleFonts.poppins(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: TraditionalMarketColors.textDark,
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                SizedBox(height: 8),
                Row(
                  children: [
                    Icon(Icons.star, color: TraditionalMarketColors.accent, size: 16),
                    SizedBox(width: 4),
                    Text(
                      '4.5',
                      style: GoogleFonts.poppins(
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                        color: TraditionalMarketColors.textLight,
                      ),
                    ),
                    SizedBox(width: 8),
                    Text(
                      '(120)',
                      style: GoogleFonts.poppins(
                        fontSize: 12,
                        color: TraditionalMarketColors.textLight,
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 8),
                SizedBox(
                  width: double.infinity,
                  child: Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      boxShadow: [
                        BoxShadow(
                          color: TraditionalMarketColors.primary,
                          offset: Offset(0, 4),
                          blurRadius: 0,
                        ),
                      ],
                    ),
                    child: OutlinedButton.icon(
                      onPressed: () {
                        Provider.of<CartService>(context, listen: false)
                            .addItem(document.id, data['name'], data['price'], data['imageUrl'], data['sellerType']);
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text(
                              'Added to cart',
                              style: GoogleFonts.poppins(
                                fontSize: 14,
                                fontWeight: FontWeight.w500,
                                color: Colors.white,
                              ),
                            ),
                            backgroundColor: TraditionalMarketColors.primary,
                            behavior: SnackBarBehavior.floating,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        );
                      },
                      icon: Icon(Icons.add_shopping_cart, size: 18),
                      label: Text('Add to Cart', style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: TraditionalMarketColors.primary,
                        side: BorderSide(color: TraditionalMarketColors.primary, width: 2),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        padding: EdgeInsets.symmetric(vertical: 12),
                        backgroundColor: Colors.white,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCategoryShimmerEffect() {
    return Shimmer.fromColors(
      baseColor: TraditionalMarketColors.neutral.withOpacity(0.3),
      highlightColor: TraditionalMarketColors.neutral,
      child: Container(
        height: 50,
        child: ListView.builder(
          scrollDirection: Axis.horizontal,
          itemCount: 5,
          itemBuilder: (context, index) {
            return Padding(
              padding: const EdgeInsets.symmetric(horizontal: 4.0),
              child: Chip(
                label: Container(
                  width: 80,
                  height: 20,
                  color: Colors.white,
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  Widget _buildProductShimmerEffect() {
    return GridView.builder(
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        childAspectRatio: 0.75,
        crossAxisSpacing: 10,
        mainAxisSpacing: 10,
      ),
      itemCount: 6,
      shrinkWrap: true,
      physics: NeverScrollableScrollPhysics(),
      itemBuilder: (context, index) {
        return Container(
          margin: EdgeInsets.all(8),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            color: Colors.white,
          ),
          child: Shimmer.fromColors(
            baseColor: TraditionalMarketColors.neutral.withOpacity(0.3),
            highlightColor: TraditionalMarketColors.neutral,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Expanded(
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                    ),
                  ),
                ),
                Padding(
                  padding: EdgeInsets.all(12),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        width: double.infinity,
                        height: 16,
                        color: Colors.white,
                      ),
                      SizedBox(height: 8),
                      Container(
                        width: 100,
                        height: 16,
                        color: Colors.white,
                      ),
                      SizedBox(height: 8),
                      Container(
                        width: double.infinity,
                        height: 36,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  void _showFirstTimeCartDialog(String productName) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (BuildContext context) {
        return Container(
          padding: EdgeInsets.all(20),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'Item Added to Cart',
                style: GoogleFonts.poppins(
                  fontSize: 22,
                  fontWeight: FontWeight.bold,
                  color: TraditionalMarketColors.textDark,
                ),
              ),
              SizedBox(height: 20),
              Text(
                'Would you like to pay now or continue shopping?',
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  color: TraditionalMarketColors.textLight,
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 30),
              Row(
                children: [
                  Expanded(
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: TraditionalMarketColors.primary,
                            offset: Offset(0, 4),
                            blurRadius: 0,
                          ),
                        ],
                      ),
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.pop(context);
                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => CartScreen()),
                          );
                        },
                        child: Text(
                          'Buy now',
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: TraditionalMarketColors.primary,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          padding: EdgeInsets.symmetric(vertical: 16),
                          elevation: 0,
                        ),
                      ),
                    ),
                  ),
                  SizedBox(width: 16),
                  Expanded(
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: TraditionalMarketColors.primary,
                            offset: Offset(0, 4),
                            blurRadius: 0,
                          ),
                        ],
                      ),
                      child: OutlinedButton(
                        onPressed: () {
                          Navigator.pop(context);
                        },
                        child: Text(
                          'Continue',
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: TraditionalMarketColors.primary,
                          side: BorderSide(color: TraditionalMarketColors.primary, width: 2),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          padding: EdgeInsets.symmetric(vertical: 16),
                          backgroundColor: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\screens\unknown_route_screen.dart
import 'package:flutter/material.dart';

class UnknownRouteScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Page Not Found'),
      ),
      body: Center(
        child: Text('The requested page could not be found.'),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\auth_service.dart
import 'package:firebase_auth/firebase_auth.dart' as auth;
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/custom_user.dart';
import '../services/firestore_service.dart';
import 'cart_service.dart';

class AuthService extends ChangeNotifier {
  final auth.FirebaseAuth _auth = auth.FirebaseAuth.instance;
  final FirestoreService _firestoreService = FirestoreService();

  CustomUser? _userFromFirebaseUser(auth.User? user) {
    if (user == null) {
      return null;
    }
    return CustomUser.fromFirebaseUser(user);
  }

  Stream<CustomUser?> get user {
    return _auth.authStateChanges().map(_userFromFirebaseUser);
  }

  CustomUser? get currentUser {
    return _userFromFirebaseUser(_auth.currentUser);
  }
  
  Future<CustomUser?> signInWithEmailAndPassword(String email, String password, BuildContext context) async {
    try {
      auth.UserCredential result = await _auth.signInWithEmailAndPassword(email: email, password: password);
      auth.User? user = result.user;
      if (user != null) {
        int points = await _firestoreService.getUserPoints(user.uid);
        CustomUser customUser = CustomUser.fromFirebaseUser(user, points: points);
        
        Provider.of<CartService>(context, listen: false).updateUserId(user.uid);
        
        notifyListeners();
        return customUser;
      }
      return null;
    } catch (e) {
      print(e.toString());
      return null;
    }
  }

  Future<CustomUser?> registerWithEmailAndPassword(String email, String password, String name, String phone) async {
    try {
      auth.UserCredential result = await _auth.createUserWithEmailAndPassword(email: email, password: password);
      auth.User? user = result.user;
      if (user != null) {
        await _firestoreService.createUser(user.uid, email, name, phone);
        CustomUser customUser = CustomUser.fromFirebaseUser(user, points: 0);
        notifyListeners();
        return customUser;
      }
      return null;
    } catch (e) {
      print('Error in registerWithEmailAndPassword: ${e.toString()}');
      rethrow;
    }
  }

  Future<void> signOut(BuildContext context) async {
    try {
      await _auth.signOut();
      Provider.of<CartService>(context, listen: false).updateUserId(null);
      notifyListeners();
    } catch (e) {
      print(e.toString());
    }
  }

  Future<bool> isUserLoggedIn() async {
    auth.User? user = _auth.currentUser;
    if (user != null) {
      return true;
    }
    return false;
  }

  Future<bool> userHasAddress() async {
    final user = currentUser;
    if (user != null) {
      return await _firestoreService.userHasAddress(user.uid);
    }
    return false;
  }

  Future<void> loadUserCart(BuildContext context) async {
    final user = currentUser;
    if (user != null) {
      Provider.of<CartService>(context, listen: false).updateUserId(user.uid);
    }
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\carrefour_service.dart
import 'package:http/http.dart' as http;
import 'package:html/parser.dart' show parse;
import 'package:html/dom.dart';
import '../models/category.dart';
import '../models/product.dart';
import 'dart:async';
import 'dart:math';

class CarrefourService {
  final int maxRetries = 3;
  final Duration retryDelay = Duration(seconds: 2);

  Future<List<Category>> getCarrefourCategories(String location) async {
    final url = 'https://glovoapp.com/ma/en/$location/carrefour-market-cas-global/';
    
    for (int attempt = 0; attempt < maxRetries; attempt++) {
      try {
        print('Fetching Carrefour categories from: $url');
        final response = await http.get(Uri.parse(url));
        print('Response status code: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          final document = parse(response.body);
          final categoryElements = document.querySelectorAll('.carousel__content__element');
          print('Found ${categoryElements.length} category elements');
          
          return categoryElements.map((element) {
            final linkElement = element.querySelector('a');
            final imageElement = element.querySelector('img.store-product-image');
            final titleElement = element.querySelector('.tile__description');

            final name = titleElement?.text.trim() ?? 'Unknown Category';
            
            // Skip categories with numbers in their titles
            if (RegExp(r'\d').hasMatch(name)) {
              return null;
            }
            
            final categoryUrl = linkElement?.attributes['href'] ?? '';
            final imageUrl = imageElement?.attributes['src'] ?? '';

            return Category(
              id: _formatId(name),
              name: name,
              url: 'https://glovoapp.com$categoryUrl',
              imageUrl: imageUrl,
              isSubcategory: false,
            );
          }).whereType<Category>().toList();  // Filter out null values
        } else {
          print('Failed to load Carrefour categories: HTTP ${response.statusCode}');
          if (attempt == maxRetries - 1) {
            throw Exception('Failed to load Carrefour categories after $maxRetries attempts: HTTP ${response.statusCode}');
          }
        }
      } catch (e) {
        print('Error fetching Carrefour categories: $e');
        if (attempt == maxRetries - 1) {
          throw Exception('Failed to load Carrefour categories after $maxRetries attempts: $e');
        }
      }

      await Future.delayed(retryDelay);
    }

    throw Exception('Failed to load Carrefour categories after $maxRetries attempts');
  }

  Future<List<Product>> getCategoryProducts(String categoryUrl) async {
    for (int attempt = 0; attempt < maxRetries; attempt++) {
      try {
        print('Fetching products from category URL: $categoryUrl');
        final response = await http.get(Uri.parse(categoryUrl));
        print('Response status code: ${response.statusCode}');

        if (response.statusCode == 200) {
          final document = parse(response.body);
          final productElements = document.querySelectorAll('.tile');
          print('Found ${productElements.length} product elements');

          return productElements.map((element) {
            final nameElement = element.querySelector('.tile__description span');
            final priceElement = element.querySelector('.product-price__effective');
            final imageElement = element.querySelector('img.tile__image');
            final productLinkElement = element.querySelector('a');

            final name = nameElement?.text.trim() ?? 'Unknown Product';
            final priceText = priceElement?.text.replaceAll(RegExp(r'[^\d.,]'), '').replaceAll(',', '.') ?? '0';
            final price = double.tryParse(priceText) ?? 0.0;
            final imageUrl = imageElement?.attributes['src'] ?? '';
            final productUrl = productLinkElement?.attributes['href'] ?? '';

            // Generate consistent rating and number of ratings based on product name
            final averageRating = _generateConsistentRating(name);
            final numberOfRatings = _generateConsistentNumberOfRatings(name);

            return Product(
              id: _formatId(name),
              name: name,
              description: '',
              price: price,
              imageUrl: imageUrl,
              category: '',
              sellerId: 'carrefour',
              sellerType: 'supermarket',
              unit: '',
              popularity: numberOfRatings,
              averageRating: averageRating,
              numberOfRatings: numberOfRatings,
              url: 'https://glovoapp.com$productUrl',
            );
          }).toList();
        } else {
          print('Failed to load category products: HTTP ${response.statusCode}');
          if (attempt == maxRetries - 1) {
            throw Exception('Failed to load category products after $maxRetries attempts: HTTP ${response.statusCode}');
          }
        }
      } catch (e) {
        print('Error fetching category products: $e');
        if (attempt == maxRetries - 1) {
          throw Exception('Failed to load category products after $maxRetries attempts: $e');
        }
      }

      await Future.delayed(retryDelay);
    }

    throw Exception('Failed to load category products after $maxRetries attempts');
  }

  String _formatId(String id) {
    return id.toLowerCase()
             .trim()
             .replaceAll(RegExp(r'\s+'), '-')
             .replaceAll(RegExp(r'[^\w\-]'), '');
  }

  double _generateConsistentRating(String productName) {
    final random = Random(_generateSeedFromString(productName));
    // Generate a random good rating between 4.0 and 5.0
    return 4.0 + random.nextDouble();
  }

  int _generateConsistentNumberOfRatings(String productName) {
    final random = Random(_generateSeedFromString(productName));
    // Generate a random number of ratings between 50 and 500
    return 50 + random.nextInt(451);
  }

  int _generateSeedFromString(String input) {
    return input.codeUnits.fold(0, (prev, curr) => prev + curr);
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\cart_service.dart
import 'package:flutter/foundation.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/cart_item.dart';

class CartService with ChangeNotifier {
  Map<String, CartItem> _items = {};
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  String? _userId;

  CartService();

  void updateUserId(String? userId) {
    _userId = userId;
    if (_userId != null) {
      loadCartFromFirestore();
    } else {
      _items.clear();
      notifyListeners();
    }
  }

  Map<String, CartItem> get items {
    return {..._items};
  }

  int get itemCount {
    return _items.length;
  }

  double get totalAmount {
    var total = 0.0;
    _items.forEach((key, cartItem) {
      total += cartItem.price * cartItem.quantity;
    });
    return total;
  }

  Future<void> loadCartFromFirestore() async {
    if (_userId == null) return;

    try {
      final snapshot = await _firestore.collection('users').doc(_userId).collection('cart').get();
      _items = {
        for (var doc in snapshot.docs)
          doc.id: CartItem.fromMap(doc.data())
      };
      notifyListeners();
    } catch (e) {
      print('Error loading cart from Firestore: $e');
    }
  }

  Future<void> saveCartToFirestore() async {
    if (_userId == null) return;

    try {
      final batch = _firestore.batch();
      final cartRef = _firestore.collection('users').doc(_userId).collection('cart');

      // Delete existing cart items
      final snapshot = await cartRef.get();
      for (var doc in snapshot.docs) {
        batch.delete(doc.reference);
      }

      // Add current cart items
      _items.forEach((key, item) {
        final docRef = cartRef.doc(key);
        batch.set(docRef, item.toMap());
      });

      await batch.commit();
    } catch (e) {
      print('Error saving cart to Firestore: $e');
    }
  }

  void addItem(String productId, String name, double price, String imageUrl, String sellerType, {int quantity = 1}) {
    if (_items.containsKey(productId)) {
      _items.update(
        productId,
        (existingCartItem) => CartItem(
          id: existingCartItem.id,
          name: existingCartItem.name,
          price: existingCartItem.price,
          imageUrl: existingCartItem.imageUrl,
          sellerType: existingCartItem.sellerType,
          quantity: existingCartItem.quantity + quantity,
        ),
      );
    } else {
      _items.putIfAbsent(
        productId,
        () => CartItem(
          id: DateTime.now().toString(),
          name: name,
          price: price,
          imageUrl: imageUrl,
          sellerType: sellerType,
          quantity: quantity,
        ),
      );
    }
    notifyListeners();
    saveCartToFirestore();
  }

  void removeItem(String productId) {
    _items.remove(productId);
    notifyListeners();
    saveCartToFirestore();
  }

  void clear() {
    _items = {};
    notifyListeners();
    saveCartToFirestore();
  }

  void decrementQuantity(String productId) {
    if (_items.containsKey(productId)) {
      if (_items[productId]!.quantity > 1) {
        _items.update(
          productId,
          (existingCartItem) => CartItem(
            id: existingCartItem.id,
            name: existingCartItem.name,
            price: existingCartItem.price,
            imageUrl: existingCartItem.imageUrl,
            sellerType: existingCartItem.sellerType,
            quantity: existingCartItem.quantity - 1,
          ),
        );
      } else {
        _items.remove(productId);
      }
      notifyListeners();
      saveCartToFirestore();
    }
  }

  void incrementQuantity(String productId) {
    if (_items.containsKey(productId)) {
      _items.update(
        productId,
        (existingCartItem) => CartItem(
          id: existingCartItem.id,
          name: existingCartItem.name,
          price: existingCartItem.price,
          imageUrl: existingCartItem.imageUrl,
          sellerType: existingCartItem.sellerType,
          quantity: existingCartItem.quantity + 1,
        ),
      );
      notifyListeners();
      saveCartToFirestore();
    }
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\chat_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class ChatService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  Stream<List<Map<String, dynamic>>> getChatMessages(String orderId) {
    return _firestore
        .collection('chats')
        .doc(orderId)
        .collection('messages')
        .orderBy('timestamp', descending: true)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        final data = doc.data();
        return {
          'id': doc.id,
          'text': data['message'],
          'sender': data['senderName'],
          'timestamp': (data['timestamp'] as Timestamp).toDate(),
          'isUser': data['senderId'] == _auth.currentUser?.uid,
        };
      }).toList();
    });
  }

  Future<void> sendMessage(String orderId, String message) async {
    final user = _auth.currentUser;
    if (user != null) {
      final messageData = {
        'senderId': user.uid,
        'senderName': user.displayName ?? 'User',
        'message': message,
        'timestamp': FieldValue.serverTimestamp(),
      };

      await _firestore.collection('chats').doc(orderId).collection('messages').add(messageData);

      await _firestore.collection('chats').doc(orderId).update({
        'lastMessage': message,
        'lastMessageTimestamp': FieldValue.serverTimestamp(),
        'unreadCount': FieldValue.increment(1),
      });
    }
  }

  Future<String> getLastMessage(String chatId) async {
    final snapshot = await _firestore
        .collection('chats')
        .doc(chatId)
        .collection('messages')
        .orderBy('timestamp', descending: true)
        .limit(1)
        .get();

    if (snapshot.docs.isNotEmpty) {
      return snapshot.docs.first['message'];
    } else {
      return 'No messages yet';
    }
  }

  Future<void> markChatAsRead(String chatId) async {
    await _firestore.collection('chats').doc(chatId).update({
      'unreadCount': 0,
    });
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\database_service.dart


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\firestore_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:my_delivery_app/models/product.dart';
import 'package:my_delivery_app/models/restaurant.dart';

class FirestoreService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

   Future<void> createUser(String uid, String email, String name, String phone) async {
    await _firestore.collection('users').doc(uid).set({
      'email': email,
      'name': name,
      'phone': phone,
      'points': 0,
      'createdAt': FieldValue.serverTimestamp(),
    });
  }

  Future<Map<String, dynamic>> getUser(String uid) async {
    DocumentSnapshot doc = await _firestore.collection('users').doc(uid).get();
    return doc.data() as Map<String, dynamic>;
  }


  Future<List<QueryDocumentSnapshot>> searchProducts(String query) async {
    QuerySnapshot querySnapshot = await _firestore.collection('products')
        .where('name', isGreaterThanOrEqualTo: query)
        .where('name', isLessThan: query + 'z')
        .get();
    return querySnapshot.docs;
  }

  Future<List<QueryDocumentSnapshot>> getSupermarkets() async {
    QuerySnapshot querySnapshot = await _firestore.collection('supermarkets').get();
    return querySnapshot.docs;
  }

  Future<List<QueryDocumentSnapshot>> getShops() async {
    QuerySnapshot querySnapshot = await _firestore.collection('shops').get();
    return querySnapshot.docs;
  }

  Future<List<QueryDocumentSnapshot>> getTraditionalMarketCategories() async {
    QuerySnapshot querySnapshot = await _firestore.collection('traditional_market_categories').get();
    return querySnapshot.docs;
  }

  Future<List<QueryDocumentSnapshot>> getProducts({String? category, required String sellerType}) async {
    Query query = _firestore.collection('products').where('sellerType', isEqualTo: sellerType);
    if (category != null) {
      query = query.where('category', isEqualTo: category);
    }
    QuerySnapshot querySnapshot = await query.get();
    return querySnapshot.docs;
  }

  Future<String> createOrder({
    required String userId,
    required double totalAmount,
    required List<Map<String, dynamic>> orderItems,
    required String status,
    required String paymentMethod,
    required String address,
    required String phoneNumber,
    required GeoPoint location,
    String? paymentIntentId,
    required String sellerType,
  }) async {
    DocumentReference orderRef = await _firestore.collection('orders').add({
      'user_id': userId,
      'total_amount': totalAmount,
      'status': status,
      'payment_method': paymentMethod,
      'address': address,
      'phone_number': phoneNumber,
      'location': location,
      'payment_intent_id': paymentIntentId,
      'created_at': FieldValue.serverTimestamp(),
      'updated_at': FieldValue.serverTimestamp(),
      'items': orderItems,
      'seller_type': sellerType,
    });

    // Calculate and add loyalty points (1 point per 10 MAD spent)
    int pointsEarned = (totalAmount / 10).floor();
    await addPoints(userId, pointsEarned);

    return orderRef.id;
  }

  // Favorites methods
  Future<void> addToFavorites(String userId, String productId) async {
    await _firestore.collection('users').doc(userId).collection('favorites').doc(productId).set({
      'added_at': FieldValue.serverTimestamp(),
    });
  }

  Future<void> removeFromFavorites(String userId, String productId) async {
    await _firestore.collection('users').doc(userId).collection('favorites').doc(productId).delete();
  }

  Future<List<QueryDocumentSnapshot>> getFavorites(String userId) async {
    QuerySnapshot favoritesSnapshot = await _firestore.collection('users').doc(userId).collection('favorites').get();
    List<String> favoriteProductIds = favoritesSnapshot.docs.map((doc) => doc.id).toList();
    
    if (favoriteProductIds.isEmpty) {
      return [];
    }

    QuerySnapshot productsSnapshot = await _firestore.collection('products')
        .where(FieldPath.documentId, whereIn: favoriteProductIds)
        .get();
    
    return productsSnapshot.docs;
  }

  Future<bool> isFavorite(String userId, String productId) async {
    DocumentSnapshot doc = await _firestore.collection('users').doc(userId).collection('favorites').doc(productId).get();
    return doc.exists;
  }

  // Order history methods
  Future<List<QueryDocumentSnapshot>> getOrderHistory(String userId) async {
    QuerySnapshot querySnapshot = await _firestore
        .collection('orders')
        .where('user_id', isEqualTo: userId)
        .orderBy('created_at', descending: true)
        .get();
    return querySnapshot.docs;
  }

  Future<DocumentSnapshot> getOrderDetails(String orderId) async {
    return await _firestore.collection('orders').doc(orderId).get();
  }

  Future<void> updateOrderStatus(String orderId, String status) async {
    await _firestore.collection('orders').doc(orderId).update({
      'status': status,
      'updated_at': FieldValue.serverTimestamp(),
    });

    // Fetch the user ID associated with this order
    DocumentSnapshot orderDoc = await _firestore.collection('orders').doc(orderId).get();
    String userId = orderDoc['user_id'];

    // Fetch the user's FCM tokens
    DocumentSnapshot userDoc = await _firestore.collection('users').doc(userId).get();
    List<String> fcmTokens = List<String>.from(userDoc['fcm_tokens'] ?? []);

    // Send notifications to all user devices
    for (String token in fcmTokens) {
      await sendNotification(token, 'Order Update', 'Your order status has been updated to: $status');
    }
  }

  Stream<DocumentSnapshot> getOrderStatusStream(String orderId) {
    return _firestore.collection('orders').doc(orderId).snapshots();
  }

  // Review methods
  Future<void> addReview(String productId, String userId, double rating, String comment) async {
    await _firestore.collection('products').doc(productId).collection('reviews').add({
      'user_id': userId,
      'rating': rating,
      'comment': comment,
      'created_at': FieldValue.serverTimestamp(),
    });

    // Update the average rating of the product
    await updateProductAverageRating(productId);
  }

  Future<void> updateProductAverageRating(String productId) async {
    QuerySnapshot reviewsSnapshot = await _firestore.collection('products').doc(productId).collection('reviews').get();
    
    if (reviewsSnapshot.docs.isEmpty) {
      await _firestore.collection('products').doc(productId).update({'average_rating': 0});
      return;
    }

    double totalRating = 0;
    reviewsSnapshot.docs.forEach((doc) {
      totalRating += (doc.data() as Map<String, dynamic>)['rating'] as double;
    });

    double averageRating = totalRating / reviewsSnapshot.docs.length;

    await _firestore.collection('products').doc(productId).update({'average_rating': averageRating});
  }

  Future<List<QueryDocumentSnapshot>> getProductReviews(String productId) async {
    QuerySnapshot querySnapshot = await _firestore
        .collection('products')
        .doc(productId)
        .collection('reviews')
        .orderBy('created_at', descending: true)
        .get();
    return querySnapshot.docs;
  }

    Future<void> saveUserAddress(String userId, String address, double latitude, double longitude) async {
    await _firestore.collection('users').doc(userId).update({
      'address': address,
      'location': GeoPoint(latitude, longitude),
      'hasSetAddress': true,
    });
  }
  
Future<bool> userHasAddress(String userId) async {
    DocumentSnapshot userDoc = await _firestore.collection('users').doc(userId).get();
    Map<String, dynamic>? userData = userDoc.data() as Map<String, dynamic>?;
    return userData?['hasSetAddress'] ?? false;
  }


  // FCM Token methods
  Future<void> saveUserFCMToken(String userId, String token) async {
    await _firestore.collection('users').doc(userId).update({
      'fcm_tokens': FieldValue.arrayUnion([token]),
    });
  }

  Future<void> removeUserFCMToken(String userId, String token) async {
    await _firestore.collection('users').doc(userId).update({
      'fcm_tokens': FieldValue.arrayRemove([token]),
    });
  }

  // Helper method to send FCM notification (you'll need to implement this using a server or cloud function)
  Future<void> sendNotification(String token, String title, String body) async {
    // Implement FCM sending logic here (typically done on the server-side)
    print('Sending notification to token: $token');
    print('Title: $title');
    print('Body: $body');
  }

  // Loyalty points methods
  Future<void> addPoints(String userId, int points) async {
    await _firestore.collection('users').doc(userId).update({
      'points': FieldValue.increment(points),
    });

    await _firestore.collection('users').doc(userId).collection('point_transactions').add({
      'points': points,
      'type': 'earned',
      'timestamp': FieldValue.serverTimestamp(),
    });
  }

  Future<void> redeemPoints(String userId, int points) async {
    DocumentSnapshot userDoc = await _firestore.collection('users').doc(userId).get();
    int currentPoints = userDoc['points'] ?? 0;

    if (currentPoints < points) {
      throw Exception('Insufficient points');
    }

    await _firestore.collection('users').doc(userId).update({
      'points': FieldValue.increment(-points),
    });

    await _firestore.collection('users').doc(userId).collection('point_transactions').add({
      'points': -points,
      'type': 'redeemed',
      'timestamp': FieldValue.serverTimestamp(),
    });
  }

  Future<int> getUserPoints(String userId) async {
    DocumentSnapshot userDoc = await _firestore.collection('users').doc(userId).get();
    return userDoc['points'] ?? 0;
  }

  Future<List<QueryDocumentSnapshot>> getPointTransactions(String userId) async {
    QuerySnapshot querySnapshot = await _firestore
        .collection('users')
        .doc(userId)
        .collection('point_transactions')
        .orderBy('timestamp', descending: true)
        .get();
    return querySnapshot.docs;
  }

  // Chat-related methods
  Future<List<QueryDocumentSnapshot>> getUserChats(String userId) async {
    QuerySnapshot querySnapshot = await _firestore
        .collection('chats')
        .where('userId', isEqualTo: userId)
        .orderBy('createdAt', descending: true)
        .get();
    return querySnapshot.docs;
  }

  Future<void> closeChatSession(String chatId) async {
    await _firestore.collection('chats').doc(chatId).update({
      'status': 'closed',
      'closedAt': FieldValue.serverTimestamp(),
    });
  }
 
  // User interaction methods
  Future<void> recordProductView(String userId, String productId, String category) async {
    await _firestore
        .collection('users')
        .doc(userId)
        .collection('viewed_products')
        .doc(productId)
        .set({
      'timestamp': FieldValue.serverTimestamp(),
      'category': category,
    });
  }

  Future<void> updateProductPopularity(String productId) async {
    await _firestore.collection('products').doc(productId).update({
      'popularity': FieldValue.increment(1),
    });
  }

  Future<DocumentSnapshot> getProductDetails(String productId) async {
    return await _firestore.collection('products').doc(productId).get();
  }

 

  Future<void> updateUserPoints(String uid, int points) async {
    await _firestore.collection('users').doc(uid).update({
      'points': points,
    });
  }

    Future<void> updateUserInfo(String uid, String name, String phone, String address) async {
    await _firestore.collection('users').doc(uid).update({
      'name': name,
      'phone': phone,
      'address': address,
    });
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\location_service.dart
import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';

class LocationService {
  static const List<String> majorCities = [
  'Casablanca', 'Rabat', 'Marrakech', 'Fes', 'Tanger',
  'Agadir', 'Meknes', 'Oujda', 'Kenitra', 'Tetouan',
  'Safi', 'Mohammedia', 'Khouribga', 'El Jadida', 'Beni Mellal',
  'Nador', 'Taza', 'Settat'
];

  Future<bool> requestLocationPermission() async {
    bool serviceEnabled;
    LocationPermission permission;

    // Test if location services are enabled.
    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      // Location services are not enabled, handle this case (maybe show a dialog to the user)
      return false;
    }

    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        // Permissions are denied, handle this case
        return false;
      }
    }
    
    if (permission == LocationPermission.deniedForever) {
      // Permissions are denied forever, handle this case
      return false;
    } 

    // Permissions are granted
    return true;
  }

  Future<Position?> getCurrentPosition() async {
    try {
      return await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
        timeLimit: Duration(seconds: 5)
      );
    } catch (e) {
      print('Error getting current position: $e');
      return null;
    }
  }

  Future<String> getCurrentCity() async {
    if (!await requestLocationPermission()) {
      return 'Casablanca'; // Default to Casablanca if permission is not granted
    }

    try {
      Position? position = await getCurrentPosition();
      if (position == null) {
        return 'Casablanca'; // Default to Casablanca if position can't be determined
      }
      
      List<Placemark> placemarks = await placemarkFromCoordinates(
        position.latitude,
        position.longitude
      );

      if (placemarks.isNotEmpty) {
        String? city = placemarks[0].locality;
        return getNearestMajorCity(city);
      }
    } catch (e) {
      print('Error getting location: $e');
    }
    
    return 'Casablanca'; // Default to Casablanca if we can't get the location
  }

  String getNearestMajorCity(String? currentCity) {
    if (currentCity == null || !majorCities.contains(currentCity)) {
      // If the current city is not in our list, find the nearest major city
      // This is a simplified version. In a real app, you'd use coordinates to find the actual nearest city
      return majorCities.first;
    }
    return currentCity;
  }

  Future<List<String>> getNearbyMajorCities() async {
    String currentCity = await getCurrentCity();
    // This is a simplified version. In a real app, you'd return a list of cities
    // sorted by their distance from the current city
    return majorCities.where((city) => city != currentCity).toList();
  }

  Future<Map<String, double>> getLatLngForCity(String cityName) async {
    try {
      List<Location> locations = await locationFromAddress(cityName);
      if (locations.isNotEmpty) {
        return {
          'latitude': locations.first.latitude,
          'longitude': locations.first.longitude,
        };
      }
    } catch (e) {
      print('Error getting coordinates for $cityName: $e');
    }
    return {'latitude': 0, 'longitude': 0}; // Default coordinates if not found
  }

  Future<double> getDistanceBetweenCities(String city1, String city2) async {
    Map<String, double> coords1 = await getLatLngForCity(city1);
    Map<String, double> coords2 = await getLatLngForCity(city2);

    return Geolocator.distanceBetween(
      coords1['latitude']!,
      coords1['longitude']!,
      coords2['latitude']!,
      coords2['longitude']!,
    ) / 1000; // Convert meters to kilometers
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\marjane_service.dart
import 'package:http/http.dart' as http;
import 'package:html/parser.dart' show parse;
import 'package:html/dom.dart';
import '../models/restaurant.dart';
import '../models/category.dart';
import '../models/product.dart';
import 'dart:async';
import 'dart:math';

class MarjaneService {
  final int maxRetries = 3;
  final Duration retryDelay = Duration(seconds: 2);

  Future<List<Category>> getMarjaneCategories(String location) async {
    final url = 'https://glovoapp.com/ma/en/$location/marjane/';
    
    for (int attempt = 0; attempt < maxRetries; attempt++) {
      try {
        print('Fetching Marjane categories from: $url');
        final response = await http.get(Uri.parse(url));
        print('Response status code: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          final document = parse(response.body);
          final categoryElements = document.querySelectorAll('.tile');
          print('Found ${categoryElements.length} category elements');
          
          return categoryElements.map((element) {
            final nameElement = element.querySelector('[data-test-id="title"]');
            final linkElement = element.querySelector('a');
            final imageElement = element.querySelector('img');

            final name = nameElement?.text.trim() ?? 'Unknown Category';
            final categoryUrl = linkElement?.attributes['href'] ?? '';
            final imageUrl = imageElement?.attributes['src'] ?? '';

            return Category(
              id: _formatId(name),
              name: name,
              url: 'https://glovoapp.com$categoryUrl',
              imageUrl: imageUrl,
              isSubcategory: false,
            );
          }).toList();
        } else {
          print('Failed to load Marjane categories: HTTP ${response.statusCode}');
          if (attempt == maxRetries - 1) {
            throw Exception('Failed to load Marjane categories after $maxRetries attempts: HTTP ${response.statusCode}');
          }
        }
      } catch (e) {
        print('Error fetching Marjane categories: $e');
        if (attempt == maxRetries - 1) {
          throw Exception('Failed to load Marjane categories after $maxRetries attempts: $e');
        }
      }

      await Future.delayed(retryDelay);
    }

    throw Exception('Failed to load Marjane categories after $maxRetries attempts');
  }

  Future<List<Product>> getCategoryProducts(String categoryUrl) async {
    for (int attempt = 0; attempt < maxRetries; attempt++) {
      try {
        print('Fetching products from category URL: $categoryUrl');
        final response = await http.get(Uri.parse(categoryUrl));
        print('Response status code: ${response.statusCode}');

        if (response.statusCode == 200) {
          final document = parse(response.body);
          final productElements = document.querySelectorAll('[data-test-id="grid-elements"] .tile');
          print('Found ${productElements.length} product elements');

          return productElements.map((element) {
            final nameElement = element.querySelector('[data-test-id="tile__highlighter"] span');
            final priceElement = element.querySelector('[data-test-id="product-price-effective"]');
            final imageElement = element.querySelector('img.tile__image');
            final productLinkElement = element.querySelector('a');

            final name = nameElement?.text.trim() ?? 'Unknown Product';
            final priceText = priceElement?.text.replaceAll(RegExp(r'[^\d.,]'), '').replaceAll(',', '.') ?? '0';
            final price = double.tryParse(priceText) ?? 0.0;
            final imageUrl = imageElement?.attributes['src'] ?? '';
            final productUrl = productLinkElement?.attributes['href'] ?? '';

            // Generate consistent rating and number of ratings based on product name
            final averageRating = _generateConsistentRating(name);
            final numberOfRatings = _generateConsistentNumberOfRatings(name);

            return Product(
              id: _formatId(name),
              name: name,
              description: '',
              price: price,
              imageUrl: imageUrl,
              category: '',
              sellerId: 'marjane',
              sellerType: 'supermarket',
              unit: '',
              popularity: numberOfRatings,
              averageRating: averageRating,
              numberOfRatings: numberOfRatings,
              url: productUrl,
            );
          }).toList();
        } else {
          print('Failed to load category products: HTTP ${response.statusCode}');
          if (attempt == maxRetries - 1) {
            throw Exception('Failed to load category products after $maxRetries attempts: HTTP ${response.statusCode}');
          }
        }
      } catch (e) {
        print('Error fetching category products: $e');
        if (attempt == maxRetries - 1) {
          throw Exception('Failed to load category products after $maxRetries attempts: $e');
        }
      }

      await Future.delayed(retryDelay);
    }

    throw Exception('Failed to load category products after $maxRetries attempts');
  }

  String _formatId(String id) {
    return id.toLowerCase()
             .trim()
             .replaceAll(RegExp(r'\s+'), '-')
             .replaceAll(RegExp(r'[^\w\-]'), '');
  }

  double _generateConsistentRating(String productName) {
    final random = Random(_generateSeedFromString(productName));
    // Generate a random good rating between 4.0 and 5.0
    return 4.0 + random.nextDouble();
  }

  int _generateConsistentNumberOfRatings(String productName) {
    final random = Random(_generateSeedFromString(productName));
    // Generate a random number of ratings between 50 and 500
    return 50 + random.nextInt(451);
  }

  int _generateSeedFromString(String input) {
    return input.codeUnits.fold(0, (prev, curr) => prev + curr);
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\medicine_service.dart
import '../models/product.dart';

class MedicineService {
  Future<List<Product>> getMedicineProducts() async {
    await Future.delayed(Duration(seconds: 2));

    return [
      Product(
        id: '1',
        name: 'Doliprane',
        price: 15.99,
        imageUrl: 'https://tse3.mm.bing.net/th?id=OIP.5omy_4pWxIQz1YEbBA915wHaHa&pid=Api&P=0&h=180',
        description: 'AnalgÃ©sique et antipyrÃ©tique Ã  base de paracÃ©tamol',
        category: 'AnalgÃ©siques et AntipyrÃ©tiques',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 95,
        averageRating: 4.7,
        url: 'https://www.doliprane.fr',
      ),
      Product(
        id: '2',
        name: 'AspÃ©gic',
        price: 12.50,
        imageUrl: 'https://tse3.mm.bing.net/th?id=OIP.ujzIGh1GSdCw4HC7oG5gwgHaHa&pid=Api&P=0&h=180',
        description: 'AnalgÃ©sique et antipyrÃ©tique Ã  base d\'aspirine',
        category: 'AnalgÃ©siques et AntipyrÃ©tiques',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 85,
        averageRating: 4.5,
        url: 'https://www.aspegic.fr',
      ),
      Product(
        id: '3',
        name: 'ProfÃ©nid',
        price: 18.75,
        imageUrl: 'https://quefarmacia.com/wp-content/uploads/2020/02/Bi-Profenid.jpg',
        description: 'AnalgÃ©sique et anti-inflammatoire Ã  base de kÃ©toprofÃ¨ne',
        category: 'AnalgÃ©siques et AntipyrÃ©tiques',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 80,
        averageRating: 4.3,
        url: 'https://www.profenid.fr',
      ),
      Product(
        id: '4',
        name: 'Nurofen',
        price: 14.25,
        imageUrl: 'https://tse4.mm.bing.net/th?id=OIP.fPyQ1GjxNgBPrN_VgnIm-gHaHa&pid=Api&P=0&h=180',
        description: 'AnalgÃ©sique et anti-inflammatoire Ã  base d\'ibuprofÃ¨ne',
        category: 'AnalgÃ©siques et AntipyrÃ©tiques',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 90,
        averageRating: 4.6,
        url: 'https://www.nurofen.fr',
      ),
      Product(
        id: '5',
        name: 'Augmentin',
        price: 25.99,
        imageUrl: 'https://tse3.mm.bing.net/th?id=OIP.QwKoCgtOe0Wa5ppzXIhOJQHaFq&pid=Api&P=0&h=180',
        description: 'Antibiotique Ã  base d\'amoxicilline/acide clavulanique',
        category: 'Antibiotiques',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 80,
        averageRating: 4.6,
        url: 'https://www.augmentin.fr',
      ),
      Product(
        id: '6',
        name: 'Amoxil',
        price: 20.50,
        imageUrl: 'https://tse2.mm.bing.net/th?id=OIP.ZaRAGzdnvPZflqA86x4WFgHaHa&pid=Api&P=0&h=180',
        description: 'Antibiotique Ã  base d\'amoxicilline',
        category: 'Antibiotiques',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 75,
        averageRating: 4.4,
        url: 'https://www.amoxil.fr',
      ),
      Product(
        id: '7',
        name: 'Flagyl',
        price: 22.75,
        imageUrl: 'https://tse3.mm.bing.net/th?id=OIP.IcrDsgfbdcs-i3XN9tvZUwHaHa&pid=Api&P=0&h=180',
        description: 'Antibiotique Ã  base de mÃ©tronidazole',
        category: 'Antibiotiques',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 70,
        averageRating: 4.2,
        url: 'https://www.flagyl.fr',
      ),
      Product(
        id: '8',
        name: 'Zinnat',
        price: 28.99,
        imageUrl: 'https://tse1.mm.bing.net/th?id=OIP.AvU00-neA1GY5yArLld33gHaHa&pid=Api&P=0&h=180',
        description: 'Antibiotique Ã  base de cÃ©furoxime',
        category: 'Antibiotiques',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 65,
        averageRating: 4.3,
        url: 'https://www.zinnat.fr',
      ),
      Product(
        id: '9',
        name: 'Smecta',
        price: 18.75,
        imageUrl: 'https://tse3.mm.bing.net/th?id=OIP.rFUoqVMOeVyttEwJqSe1NQHaGZ&pid=Api&P=0&h=180',
        description: 'MÃ©dicament antidiarrhÃ©ique Ã  base de diosmectite',
        category: 'MÃ©dicaments Gastro-intestinaux',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 75,
        averageRating: 4.4,
        url: 'https://www.smecta.fr',
      ),
      Product(
        id: '10',
        name: 'Maalox',
        price: 16.50,
        imageUrl: 'https://tse2.mm.bing.net/th?id=OIP.zffX-s_eOtODpVD7HO8l-wHaI7&pid=Api&P=0&h=180',
        description: 'Antiacide Ã  base d\'hydroxyde d\'aluminium/hydroxyde de magnÃ©sium',
        category: 'MÃ©dicaments Gastro-intestinaux',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'flacon',
        popularity: 80,
        averageRating: 4.5,
        url: 'https://www.maalox.fr',
      ),
      Product(
        id: '11',
        name: 'Motilium',
        price: 19.99,
        imageUrl: 'https://tse1.mm.bing.net/th?id=OIP.PD6rCgF33otzahpyXU1PnAHaHa&pid=Api&P=0&h=180',
        description: 'AntiÃ©mÃ©tique et agent prokinÃ©tique Ã  base de dompÃ©ridone',
        category: 'MÃ©dicaments Gastro-intestinaux',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 70,
        averageRating: 4.3,
        url: 'https://www.motilium.fr',
      ),
      Product(
        id: '12',
        name: 'Spasfon',
        price: 14.25,
        imageUrl: 'https://tse3.mm.bing.net/th?id=OIP.o_8WaPCXCQAMRso4uJ6ynwHaHa&pid=Api&P=0&h=180',
        description: 'MÃ©dicament antispasmodique Ã  base de phloroglucinol',
        category: 'MÃ©dicaments Gastro-intestinaux',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 75,
        averageRating: 4.4,
        url: 'https://www.spasfon.fr',
      ),
      Product(
        id: '13',
        name: 'Ventoline',
        price: 22.50,
        imageUrl: 'https://tse2.mm.bing.net/th?id=OIP.CZ_Mm-c_P8jnFeBpv8j5mgHaJw&pid=Api&P=0&h=180',
        description: 'Bronchodilatateur Ã  base de salbutamol',
        category: 'MÃ©dicaments Respiratoires',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'inhalateur',
        popularity: 85,
        averageRating: 4.7,
        url: 'https://www.ventoline.fr',
      ),
      Product(
        id: '14',
        name: 'Rhinathiol',
        price: 17.75,
        imageUrl: 'https://tse3.mm.bing.net/th?id=OIP.ybfrDH-LkcIW1qnFybXIRgHaFj&pid=Api&P=0&h=180',
        description: 'Agent mucolytique Ã  base de carbocistÃ©ine',
        category: 'MÃ©dicaments Respiratoires',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'flacon',
        popularity: 75,
        averageRating: 4.3,
        url: 'https://www.rhinathiol.fr',
      ),
      Product(
        id: '15',
        name: 'Pulmicort',
        price: 29.99,
        imageUrl: 'https://tse1.mm.bing.net/th?id=OIP.qWy1jhgmSjRUR7qu6qjUTwHaHa&pid=Api&P=0&h=180',
        description: 'CorticostÃ©roÃ¯de inhalÃ© Ã  base de budÃ©sonide',
        category: 'MÃ©dicaments Respiratoires',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'inhalateur',
        popularity: 80,
        averageRating: 4.5,
        url: 'https://www.pulmicort.fr',
      ),
      Product(
        id: '16',
        name: 'Aerius',
        price: 24.50,
        imageUrl: 'https://tse3.mm.bing.net/th?id=OIP.rGD6LSJB3vZ-khp4hf__nQHaHa&pid=Api&P=0&h=180',
        description: 'Antihistaminique Ã  base de desloratadine',
        category: 'MÃ©dicaments Respiratoires',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 70,
        averageRating: 4.4,
        url: 'https://www.aerius.fr',
      ),
      Product(
        id: '17',
        name: 'Tenormine',
        price: 26.75,
        imageUrl: 'https://tse2.mm.bing.net/th?id=OIP.WPtM_6BlkjogP0rZyVRj2AHaEK&pid=Api&P=0&h=180',
        description: 'BÃªta-bloquant Ã  base d\'atÃ©nolol',
        category: 'MÃ©dicaments Cardiovasculaires',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 75,
        averageRating: 4.5,
        url: 'https://www.tenormine.fr',
      ),
      Product(
        id: '19',
        name: 'Aspirine Cardio',
        price: 15.50,
        imageUrl: 'https://tse1.mm.bing.net/th?id=OIP.Z3eTkp5Y3e3zzlQNnEVd1AHaEP&pid=Api&P=0&h=180',
        description: 'Aspirine Ã  faible dose pour la protection cardiovasculaire',
        category: 'MÃ©dicaments Cardiovasculaires',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 85,
        averageRating: 4.7,
        url: 'https://www.aspirinecardio.fr',
      ),
      Product(
        id: '20',
        name: 'Sintrom',
        price: 22.25,
        imageUrl: 'https://pharmaco.co.za/wp-content/uploads/2021/08/Sintrom-ANF-3D.png',
        description: 'Anticoagulant Ã  base d\'acÃ©nocoumarol',
        category: 'MÃ©dicaments Cardiovasculaires',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 70,
        averageRating: 4.4,
        url: 'https://www.sintrom.fr',
      ),

      Product(
        id: '22',
        name: 'Daonil',
        price: 18.75,
        imageUrl: 'https://www.assetpharmacy.com/wp-content/uploads/2017/09/Daonil-Tablets-Glibenclamide-5mg-Tablets-10-Tablets-1.jpg',
        description: 'MÃ©dicament antidiabÃ©tique Ã  base de glibenclamide',
        category: 'MÃ©dicaments AntidiabÃ©tiques',
        sellerId: 'pharmacie_locale',
        sellerType: 'pharmacie',
        unit: 'boÃ®te',
        popularity: 75,
        averageRating: 4.4,
        url: 'https://www.daonil.fr',
      ),
    ];
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\notification_service.dart
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter/material.dart';

class NotificationService {
  final FirebaseMessaging _fcm = FirebaseMessaging.instance;
  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();
  static bool _isRequestingPermission = false;

  Future<void> init() async {
    if (_isRequestingPermission) return;
    _isRequestingPermission = true;

    try {
      // Request permission for iOS devices
      await _fcm.requestPermission(
        alert: true,
        announcement: false,
        badge: true,
        carPlay: false,
        criticalAlert: false,
        provisional: false,
        sound: true,
      );

      // Configure FCM
      FirebaseMessaging.onMessage.listen(_handleForegroundMessage);
      FirebaseMessaging.onMessageOpenedApp.listen(_handleBackgroundMessage);
      FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

      // Initialize local notifications
      const AndroidInitializationSettings initializationSettingsAndroid = AndroidInitializationSettings('@mipmap/ic_launcher');
      final DarwinInitializationSettings initializationSettingsIOS = DarwinInitializationSettings();
      final InitializationSettings initializationSettings = InitializationSettings(
        android: initializationSettingsAndroid,
        iOS: initializationSettingsIOS,
      );
      await _flutterLocalNotificationsPlugin.initialize(initializationSettings);
    } catch (e) {
      print('Failed to request permission: $e');
    } finally {
      _isRequestingPermission = false;
    }
  }

  Future<String?> getToken() async {
    return await _fcm.getToken();
  }

  void _handleForegroundMessage(RemoteMessage message) {
    print("Handling a foreground message: ${message.messageId}");
    _showNotification(message);
  }

  void _handleBackgroundMessage(RemoteMessage message) {
    print("Handling a background message: ${message.messageId}");
    // Handle background message, e.g., navigate to a specific screen
  }

  Future<void> _showNotification(RemoteMessage message) async {
    const AndroidNotificationDetails androidPlatformChannelSpecifics = AndroidNotificationDetails(
      'order_updates_channel',
      'Order Updates',
      importance: Importance.max,
      priority: Priority.high,
      showWhen: false,
    );
    const NotificationDetails platformChannelSpecifics = NotificationDetails(android: androidPlatformChannelSpecifics);
    
    await _flutterLocalNotificationsPlugin.show(
      0, // Notification ID
      message.notification?.title ?? 'New Notification',
      message.notification?.body ?? '',
      platformChannelSpecifics,
      payload: message.data['order_id'],
    );
  }
}

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  print("Handling a background message: ${message.messageId}");
  // Handle background message, e.g., update local storage
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\order_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class OrderService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Stream<Map<String, dynamic>> getOrderStream(String orderId) {
    return _firestore
        .collection('orders')
        .doc(orderId)
        .snapshots()
        .map((snapshot) => snapshot.data() as Map<String, dynamic>);
  }

  Future<void> updateOrderStatus(String orderId, String status) async {
    await _firestore.collection('orders').doc(orderId).update({
      'status': status,
      'updated_at': FieldValue.serverTimestamp(),
    });
  }

  Future<void> updateDeliveryLocation(String orderId, GeoPoint location) async {
    await _firestore.collection('orders').doc(orderId).update({
      'delivery_location': location,
      'updated_at': FieldValue.serverTimestamp(),
    });
  }

  Future<void> assignDeliveryPerson(String orderId, String deliveryPersonId) async {
    await _firestore.collection('orders').doc(orderId).update({
      'delivery_person_id': deliveryPersonId,
      'updated_at': FieldValue.serverTimestamp(),
    });
  }

  Future<Map<String, dynamic>> getOrderDetails(String orderId) async {
    DocumentSnapshot orderSnapshot = await _firestore.collection('orders').doc(orderId).get();
    return orderSnapshot.data() as Map<String, dynamic>;
  }

  Stream<List<Map<String, dynamic>>> getUserOrdersStream(String userId) {
    return _firestore
        .collection('orders')
        .where('user_id', isEqualTo: userId)
        .orderBy('created_at', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs.map((doc) => doc.data() as Map<String, dynamic>).toList());
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\payment_service.dart
import 'dart:convert';
import 'package:flutter_stripe/flutter_stripe.dart';
import 'package:http/http.dart' as http;

class PaymentService {
  static const String _backendUrl = 'https://backend-url.com';
  Future<void> initializeStripe() async {
    Stripe.publishableKey = 'publishable_key_here'; 
  }

  Future<PaymentIntent> processPayment(double amount, String currency) async {
    try {
      
      final response = await http.post(
        Uri.parse('$_backendUrl/create-payment-intent'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'amount': (amount * 100).toInt(), 
          'currency': currency,
        }),
      );

      final paymentIntentData = json.decode(response.body);
      await Stripe.instance.initPaymentSheet(
        paymentSheetParameters: SetupPaymentSheetParameters(
          paymentIntentClientSecret: paymentIntentData['client_secret'],
          merchantDisplayName: 'My delivery',
        ),
      );

      await Stripe.instance.presentPaymentSheet();

      return PaymentIntent(
        id: paymentIntentData['id'],
        status: paymentIntentData['status'],
      );
    } catch (e) {
      print('Error processing payment: $e');
      rethrow;
    }
  }
}

class PaymentIntent {
  final String id;
  final String status;

  PaymentIntent({required this.id, required this.status});
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\promotion_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/promotion.dart';

class PromotionService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<List<Promotion>> getActivePromotions() async {
    final now = DateTime.now();
    final snapshot = await _firestore
        .collection('promotions')
        .where('startDate', isLessThanOrEqualTo: now)
        .where('endDate', isGreaterThanOrEqualTo: now)
        .get();

    return snapshot.docs
        .map((doc) => Promotion.fromMap(doc.data(), doc.id))
        .toList();
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\recommendation_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/product.dart';

class RecommendationService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<List<Product>> getRecommendations(String userId) async {
    // Get user's purchase history
    QuerySnapshot purchaseHistory = await _firestore
        .collection('orders')
        .where('userId', isEqualTo: userId)
        .get();

    // Get user's viewed products
    QuerySnapshot viewedProducts = await _firestore
        .collection('users')
        .doc(userId)
        .collection('viewed_products')
        .get();

    // Combine and process the data to generate recommendations
    Set<String> recommendedProductIds = await _generateRecommendations(purchaseHistory, viewedProducts);

    // Fetch the actual product details
    List<Product> recommendations = await _fetchProductDetails(recommendedProductIds);

    return recommendations;
  }

  Future<Set<String>> _generateRecommendations(QuerySnapshot purchases, QuerySnapshot viewed) async {
    Set<String> recommendedProductIds = {};
    Map<String, int> categoryScores = {};

    // Process purchase history
    for (var doc in purchases.docs) {
      List<dynamic> items = doc['items'];
      for (var item in items) {
        String category = item['category'];
        categoryScores[category] = (categoryScores[category] ?? 0) + 3; // Higher weight for purchased items
      }
    }

    // Process viewed products
    for (var doc in viewed.docs) {
      String category = doc['category'];
      categoryScores[category] = (categoryScores[category] ?? 0) + 1;
    }

    // Get top categories
    var sortedCategories = categoryScores.entries.toList()
      ..sort((a, b) => b.value.compareTo(a.value));
    
    // Get products from top categories
    for (var entry in sortedCategories.take(5)) {
      QuerySnapshot categoryProducts = await _firestore
          .collection('products')
          .where('category', isEqualTo: entry.key)
          .orderBy('popularity', descending: true)
          .limit(10)
          .get();
      recommendedProductIds.addAll(categoryProducts.docs.map((doc) => doc.id));
    }

    // Add some popular products across all categories
    QuerySnapshot popularProducts = await _firestore
        .collection('products')
        .orderBy('popularity', descending: true)
        .limit(5)
        .get();
    recommendedProductIds.addAll(popularProducts.docs.map((doc) => doc.id));

    return recommendedProductIds;
  }

  Future<List<Product>> _fetchProductDetails(Set<String> productIds) async {
    List<Product> products = [];
    for (String id in productIds) {
      DocumentSnapshot doc = await _firestore.collection('products').doc(id).get();
      if (doc.exists) {
        products.add(Product.fromMap(doc.data() as Map<String, dynamic>));
      }
    }
    return products;
  }

  Future<void> recordProductView(String userId, String productId, String category) async {
    await _firestore
        .collection('users')
        .doc(userId)
        .collection('viewed_products')
        .doc(productId)
        .set({
      'timestamp': FieldValue.serverTimestamp(),
      'category': category,
    });
  }

  Future<void> updateProductPopularity(String productId) async {
    await _firestore.collection('products').doc(productId).update({
      'popularity': FieldValue.increment(1),
    });
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\review_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/review.dart';

class ReviewService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> addReview(Review review) async {
    await _firestore.collection('reviews').add(review.toMap());
    await updateProductRating(review.productId);
  }

  Future<List<Review>> getProductReviews(String productId) async {
    QuerySnapshot querySnapshot = await _firestore
        .collection('reviews')
        .where('productId', isEqualTo: productId)
        .orderBy('createdAt', descending: true)
        .get();

    return querySnapshot.docs.map((doc) => Review.fromFirestore(doc)).toList();
  }

  Future<void> updateProductRating(String productId) async {
    QuerySnapshot reviewsSnapshot = await _firestore
        .collection('reviews')
        .where('productId', isEqualTo: productId)
        .get();

    if (reviewsSnapshot.docs.isEmpty) {
      await _firestore.collection('products').doc(productId).update({
        'averageRating': 0,
        'numberOfReviews': 0,
      });
      return;
    }

    double totalRating = 0;
    reviewsSnapshot.docs.forEach((doc) {
      totalRating += (doc.data() as Map<String, dynamic>)['rating'] as double;
    });

    double averageRating = totalRating / reviewsSnapshot.docs.length;
    int numberOfReviews = reviewsSnapshot.docs.length;

    await _firestore.collection('products').doc(productId).update({
      'averageRating': averageRating,
      'numberOfReviews': numberOfReviews,
    });
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\search_history_service.dart
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

class SearchHistoryService {
  static const String _key = 'search_history';
  static const int _maxHistoryItems = 10;

  Future<List<String>> getSearchHistory() async {
    final prefs = await SharedPreferences.getInstance();
    final history = prefs.getStringList(_key) ?? [];
    return history;
  }

  Future<void> addSearchQuery(String query) async {
    final prefs = await SharedPreferences.getInstance();
    List<String> history = prefs.getStringList(_key) ?? [];
    
    // Remove the query if it already exists to avoid duplicates
    history.remove(query);
    
    // Add the new query to the beginning of the list
    history.insert(0, query);
    
    // Limit the history to _maxHistoryItems
    if (history.length > _maxHistoryItems) {
      history = history.sublist(0, _maxHistoryItems);
    }
    
    await prefs.setStringList(_key, history);
  }

  Future<void> clearSearchHistory() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_key);
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\services\traditional_market_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class TraditionalMarketService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Fetch all categories
  Stream<QuerySnapshot> getCategories() {
    return _firestore.collection('categories').snapshots();
  }

  // Fetch products for a specific category
  Stream<QuerySnapshot> getProductsByCategory(String categoryId) {
    return _firestore
        .collection('products')
        .where('category', isEqualTo: categoryId)
        .snapshots();
  }

  // Add a new category
  Future<void> addCategory(String name, String description) {
    return _firestore.collection('categories').add({
      'name': name,
      'description': description,
    });
  }

  // Add a new product
  Future<void> addProduct(Map<String, dynamic> productData) {
    return _firestore.collection('products').add(productData);
  }

  // Update a category
  Future<void> updateCategory(String categoryId, Map<String, dynamic> data) {
    return _firestore.collection('categories').doc(categoryId).update(data);
  }

  // Update a product
  Future<void> updateProduct(String productId, Map<String, dynamic> data) {
    return _firestore.collection('products').doc(productId).update(data);
  }

  // Delete a category
  Future<void> deleteCategory(String categoryId) {
    return _firestore.collection('categories').doc(categoryId).delete();
  }

  // Delete a product
  Future<void> deleteProduct(String productId) {
    return _firestore.collection('products').doc(productId).delete();
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\utils\constants.dart


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\utils\theme.dart


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\utils\theme_extensions.dart
import 'package:flutter/material.dart';

extension TextThemeExtensions on TextTheme {
  TextStyle? get subtitle1 => titleMedium;
  TextStyle? get headline5 => headlineSmall;
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\widgets\carrefour_card.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../models/restaurant.dart';

class CarrefourCard extends StatelessWidget {
  final Restaurant store;
  final VoidCallback onTap;

  const CarrefourCard({
    Key? key,
    required this.store,
    required this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        height: 250,
        margin: EdgeInsets.only(bottom: 16),
        child: Stack(
          children: [
            ClipRRect(
              borderRadius: BorderRadius.circular(16),
              child: Image.network(
                store.imageUrl,
                height: 250,
                width: double.infinity,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    height: 250,
                    color: Colors.grey[300],
                    child: Icon(Icons.store, size: 50, color: Colors.grey[400]),
                  );
                },
              ),
            ),
            Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(16),
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    Colors.black.withOpacity(0.7),
                    Colors.transparent,
                    Colors.black.withOpacity(0.7),
                  ],
                  stops: [0.0, 0.3, 1.0],
                ),
              ),
            ),
            Positioned(
              top: 16,
              right: 26,
              child: Text(
                store.cuisine,
                style: GoogleFonts.poppins(
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                  color: Colors.white,
                ),
              ),
            ),
            Positioned(
              left: 25,
              bottom: 80,
              right: 100,
              child: Text(
                store.name,
                style: GoogleFonts.poppins(
                  fontSize: 20,
                  fontWeight: FontWeight.w600,
                  color: Colors.white,
                ),
                key: ValueKey('store-card-title'),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
            ),
            Positioned(
              left: 16,
              right: 16,
              bottom: 16,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  SizedBox(height: 8),
                  Row(
                    children: [
                      _buildInfoChip(
                        icon: Icons.thumb_up,
                        color: Colors.blue,
                        text: '${store.rating}% (${store.ratingCount})',
                      ),
                      SizedBox(width: 8),
                      _buildInfoChip(
                        icon: Icons.access_time,
                        color: Colors.orange,
                        text: '${store.estimatedDeliveryTime} min',
                      ),
                    ],
                  ),
                  if (store.tags.isNotEmpty)
                    Padding(
                      padding: const EdgeInsets.only(top: 8),
                      child: Wrap(
                        spacing: 8,
                        runSpacing: 4,
                        children: store.tags.map((tag) => _buildTag(tag)).toList(),
                      ),
                    ),
                ],
              ),
            ),
            if (store.discount > 0)
              Positioned(
                top: 12,
                left: 12,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.yellow,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '-${store.discount}%',
                    style: GoogleFonts.poppins(
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoChip({required IconData icon, required Color color, required String text}) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16, color: Colors.white),
          SizedBox(width: 4),
          Text(
            text,
            style: GoogleFonts.poppins(
              fontSize: 12,
              fontWeight: FontWeight.w500,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTag(String tag) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        tag,
        style: GoogleFonts.poppins(
          fontSize: 12,
          fontWeight: FontWeight.w500,
          color: Colors.white,
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\widgets\cart_widget.dart


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\widgets\category_card.dart
import 'package:flutter/material.dart';

class CategoryCard extends StatelessWidget {
  final String title;
  final String imageUrl;
  final Color color;
  final VoidCallback onTap;

  const CategoryCard({
    Key? key,
    required this.title,
    required this.imageUrl,
    required this.color,
    required this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        decoration: BoxDecoration(
          color: color,
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset(
              imageUrl,
              height: 60,
              width: 60,
            ),
            SizedBox(height: 12),
            Text(
              title,
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\widgets\how_it_works_widget.dart
import 'package:flutter/material.dart';

class HowItWorksWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      height: 200,
      child: ListView(
        scrollDirection: Axis.horizontal,
        children: [
          _buildStep(Icons.login, 'Connect'),
          _buildStep(Icons.shopping_cart, 'Choose Products'),
          _buildStep(Icons.location_on, 'Select Address'),
          _buildStep(Icons.payment, 'Choose Payment'),
        ],
      ),
    );
  }

  Widget _buildStep(IconData icon, String text) {
    return Container(
      width: 120,
      margin: EdgeInsets.only(right: 16),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(icon, size: 50, color: Colors.blue),
          SizedBox(height: 8),
          Text(text, textAlign: TextAlign.center),
        ],
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\widgets\product_card.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class ProductCard extends StatelessWidget {
  final String id;
  final String name;
  final double price;
  final String imageUrl;
  final String unit;
  final String description;
  final bool isFavorite;
  final double averageRating;

  ProductCard({
    required this.id,
    required this.name,
    required this.price,
    required this.imageUrl,
    required this.unit,
    required this.description,
    required this.isFavorite,
    required this.averageRating,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
       
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            flex: 3,
            child: ClipRRect(
              borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
              child: Image.network(
                imageUrl,
                width: double.infinity,
                fit: BoxFit.cover,
              ),
            ),
          ),
          Expanded(
            flex: 2,
            child: Padding(
              padding: EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Flexible(
                    child: Text(
                      name,
                      style: GoogleFonts.poppins(
                        textStyle: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                        ),
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  Text(
                    '${price.toStringAsFixed(2)} MAD',
                    style: TextStyle(
                      color: Colors.green,
                      fontWeight: FontWeight.bold,
                      fontSize: 12,
                    ),
                  ),
                  Row(
                    children: [
                      Icon(Icons.star, color: Colors.amber, size: 14),
                      SizedBox(width: 4),
                      Text(
                        averageRating.toStringAsFixed(1),
                        style: TextStyle(fontSize: 10),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\widgets\promotion_banner.dart
import 'package:flutter/material.dart';
import 'package:carousel_slider/carousel_slider.dart';
import '../models/promotion.dart';

class PromotionBanner extends StatelessWidget {
  final List<Promotion> promotions;

  const PromotionBanner({Key? key, required this.promotions}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return CarouselSlider(
      options: CarouselOptions(
        height: 200.0,
        viewportFraction: 0.9,
        aspectRatio: 16/9,
        autoPlay: true,
        enlargeCenterPage: true,
      ),
      items: promotions.map((promotion) {
        return Builder(
          builder: (BuildContext context) {
            return GestureDetector(
              onTap: () {
                // Handle promotion tap (e.g., open the link)
                print('Tapped promotion: ${promotion.title}');
                // You can implement navigation to the promotion details or use the linkUrl here
              },
              child: Container(
                width: MediaQuery.of(context).size.width,
                margin: EdgeInsets.symmetric(horizontal: 5.0),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(10),
                  image: DecorationImage(
                    image: NetworkImage(promotion.imageUrl),
                    fit: BoxFit.cover,
                  ),
                ),
                child: Container(
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    gradient: LinearGradient(
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      colors: [Colors.transparent, Colors.black.withOpacity(0.7)],
                    ),
                  ),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.end,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          promotion.title,
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        SizedBox(height: 4),
                        Text(
                          promotion.description,
                          style: TextStyle(color: Colors.white, fontSize: 14),
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            );
          },
        );
      }).toList(),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\widgets\review_list_item.dart
import 'package:flutter/material.dart';
import '../models/review.dart';

class ReviewListItem extends StatelessWidget {
  final Review review;

  ReviewListItem({required this.review});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 8),
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Text(
                  'Rating: ',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                Row(
                  children: List.generate(5, (index) {
                    return Icon(
                      index < review.rating ? Icons.star : Icons.star_border,
                      color: Colors.amber,
                      size: 20,
                    );
                  }),
                ),
              ],
            ),
            SizedBox(height: 8),
            Text(review.comment),
            SizedBox(height: 8),
            Text(
              'Posted on ${review.createdAt.toString().substring(0, 10)}',
              style: TextStyle(color: Colors.grey, fontSize: 12),
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\Glovo delivery\lib\widgets\why_us_widget.dart
import 'package:flutter/material.dart';

class WhyUsWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildFeature(Icons.monetization_on, 'Competitive Pricing', 'Pay less, get more'),
        _buildFeature(Icons.star, 'Points System', 'Earn points with every purchase'),
        _buildFeature(Icons.delivery_dining, 'Fast Delivery', 'Quick and reliable service'),
      ],
    );
  }

  Widget _buildFeature(IconData icon, String title, String description) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16.0),
      child: Row(
        children: [
          Icon(icon, size: 40, color: Colors.green),
          SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(title, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                Text(description),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

